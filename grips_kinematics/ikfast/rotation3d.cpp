/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-08-08 15:50:45.920983
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38;
x0=IKsin(j[0]);
x1=IKcos(j[5]);
x2=IKcos(j[3]);
x3=IKsin(j[5]);
x4=IKsin(j[3]);
x5=IKsin(j[4]);
x6=IKcos(j[2]);
x7=IKsin(j[1]);
x8=IKcos(j[1]);
x9=IKsin(j[2]);
x10=IKcos(j[4]);
x11=IKcos(j[0]);
x12=((IkReal(1.00000000000000))*(x0));
x13=((IkReal(1.00000000000000))*(x11));
x14=((IkReal(1.00000000000000))*(x1));
x15=((x10)*(x4));
x16=((x10)*(x3));
x17=((x10)*(x2));
x18=((x6)*(x8));
x19=((x6)*(x7));
x20=((x7)*(x9));
x21=((x2)*(x3));
x22=((x8)*(x9));
x23=((x1)*(x10));
x24=((IkReal(1.00000000000000))*(x18));
x25=((IkReal(1.00000000000000))*(x19));
x26=((IkReal(1.00000000000000))*(x4)*(x5));
x27=((x11)*(x22));
x28=((x19)+(x22));
x29=((((IkReal(-1.00000000000000))*(x24)))+(x20));
x30=((((x1)*(x2)*(x5)))+(((x3)*(x4))));
x31=((x21)+(((IkReal(-1.00000000000000))*(x14)*(x4)*(x5))));
x32=((((x21)*(x5)))+(((IkReal(-1.00000000000000))*(x14)*(x4))));
x33=((((x0)*(x20)))+(((IkReal(-1.00000000000000))*(x12)*(x18))));
x34=((((IkReal(-1.00000000000000))*(x13)*(x20)))+(((x11)*(x18))));
x35=((x27)+(((x11)*(x19))));
x36=((((IkReal(-1.00000000000000))*(x14)*(x2)))+(((IkReal(-1.00000000000000))*(x26)*(x3))));
x37=((x12)*(((x19)+(x22))));
x38=((IkReal(-1.00000000000000))*(x37));
eerot[0]=((((x11)*(x23)))+(((x30)*(x33)))+(((x31)*(x38))));
eerot[1]=((((x17)*(x33)))+(((x15)*(x37)))+(((IkReal(-1.00000000000000))*(x13)*(x5))));
eerot[2]=((((x36)*(x38)))+(((x11)*(x16)))+(((x32)*(x33))));
eerot[3]=((((x0)*(x23)))+(((x30)*(x34)))+(((x31)*(x35))));
IkReal x39=((IkReal(1.00000000000000))*(x13));
eerot[4]=((((x15)*(((((IkReal(-1.00000000000000))*(x22)*(x39)))+(((IkReal(-1.00000000000000))*(x19)*(x39)))))))+(((IkReal(-1.00000000000000))*(x12)*(x5)))+(((x17)*(x34))));
eerot[5]=((((x35)*(x36)))+(((x0)*(x16)))+(((x32)*(x34))));
eerot[6]=((((x29)*(x31)))+(((x28)*(x30))));
eerot[7]=((((x17)*(x28)))+(((x15)*(((((IkReal(-1.00000000000000))*(x20)))+(x24))))));
eerot[8]=((((x29)*(x36)))+(((x28)*(x32))));
}

IKFAST_API int GetNumFreeParameters() { return 3; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x34000002; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
IkReal x40=IKsin(j2);
IkReal x41=IKcos(j0);
IkReal x42=IKsin(j1);
IkReal x43=IKcos(j1);
IkReal x44=IKcos(j2);
IkReal x45=IKsin(j0);
IkReal x46=((IkReal(1.00000000000000))*(x43));
IkReal x47=((r00)*(x45));
IkReal x48=((r10)*(x41));
IkReal x49=((x42)*(x44));
new_r00=((((IkReal(-1.00000000000000))*(r20)*(x44)*(x46)))+(((IkReal(-1.00000000000000))*(x47)*(x49)))+(((r20)*(x40)*(x42)))+(((x48)*(x49)))+(((x40)*(x43)*(x48)))+(((IkReal(-1.00000000000000))*(x40)*(x46)*(x47))));
IkReal x50=IKcos(j2);
IkReal x51=IKcos(j1);
IkReal x52=IKsin(j0);
IkReal x53=IKsin(j1);
IkReal x54=IKsin(j2);
IkReal x55=IKcos(j0);
IkReal x56=((IkReal(1.00000000000000))*(x54));
IkReal x57=((r12)*(x55));
IkReal x58=((r02)*(x52));
IkReal x59=((x50)*(x53));
new_r01=((((IkReal(-1.00000000000000))*(x51)*(x56)*(x57)))+(((IkReal(-1.00000000000000))*(x57)*(x59)))+(((x58)*(x59)))+(((r22)*(x50)*(x51)))+(((x51)*(x54)*(x58)))+(((IkReal(-1.00000000000000))*(r22)*(x53)*(x56))));
IkReal x60=IKsin(j1);
IkReal x61=IKcos(j0);
IkReal x62=IKsin(j2);
IkReal x63=IKcos(j1);
IkReal x64=IKcos(j2);
IkReal x65=IKsin(j0);
IkReal x66=((IkReal(1.00000000000000))*(x64));
IkReal x67=((r01)*(x65));
IkReal x68=((r11)*(x61));
IkReal x69=((x62)*(x63));
new_r02=((((IkReal(-1.00000000000000))*(r21)*(x63)*(x66)))+(((x68)*(x69)))+(((IkReal(-1.00000000000000))*(x67)*(x69)))+(((x60)*(x64)*(x68)))+(((r21)*(x60)*(x62)))+(((IkReal(-1.00000000000000))*(x60)*(x66)*(x67))));
IkReal x70=IKcos(j1);
IkReal x71=IKsin(j2);
IkReal x72=IKcos(j2);
IkReal x73=IKsin(j1);
IkReal x74=IKsin(j0);
IkReal x75=IKcos(j0);
IkReal x76=((r00)*(x74));
IkReal x77=((r10)*(x75));
IkReal x78=((x70)*(x72));
IkReal x79=((x71)*(x73));
new_r10=((((r20)*(x72)*(x73)))+(((IkReal(-1.00000000000000))*(x77)*(x79)))+(((x76)*(x79)))+(((IkReal(-1.00000000000000))*(x76)*(x78)))+(((r20)*(x70)*(x71)))+(((x77)*(x78))));
IkReal x80=IKsin(j0);
IkReal x81=IKsin(j1);
IkReal x82=IKsin(j2);
IkReal x83=IKcos(j2);
IkReal x84=IKcos(j1);
IkReal x85=IKcos(j0);
IkReal x86=((r12)*(x85));
IkReal x87=((IkReal(1.00000000000000))*(x83));
IkReal x88=((r02)*(x80));
IkReal x89=((x81)*(x82));
new_r11=((((IkReal(-1.00000000000000))*(r22)*(x81)*(x87)))+(((IkReal(-1.00000000000000))*(r22)*(x82)*(x84)))+(((x86)*(x89)))+(((IkReal(-1.00000000000000))*(x88)*(x89)))+(((IkReal(-1.00000000000000))*(x84)*(x86)*(x87)))+(((x83)*(x84)*(x88))));
IkReal x90=IKcos(j1);
IkReal x91=IKcos(j2);
IkReal x92=IKsin(j1);
IkReal x93=IKsin(j2);
IkReal x94=IKsin(j0);
IkReal x95=IKcos(j0);
IkReal x96=((r11)*(x95));
IkReal x97=((r01)*(x94));
IkReal x98=((x92)*(x93));
IkReal x99=((x90)*(x91));
new_r12=((((r21)*(x91)*(x92)))+(((x96)*(x99)))+(((IkReal(-1.00000000000000))*(x96)*(x98)))+(((IkReal(-1.00000000000000))*(x97)*(x99)))+(((x97)*(x98)))+(((r21)*(x90)*(x93))));
new_r20=((((r00)*(IKcos(j0))))+(((r10)*(IKsin(j0)))));
new_r21=((((IkReal(-1.00000000000000))*(r12)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(r02)*(IKcos(j0)))));
new_r22=((((r01)*(IKcos(j0))))+(((r11)*(IKsin(j0)))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; 
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=((IkReal(-1.00000000000000))*(r22));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(-1.00000000000000))*((r02)*(r02))))+(((IkReal(-1.00000000000000))*((r12)*(r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((r02)*(r02))))+(((IkReal(-1.00000000000000))*((r12)*(r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((sj4)*((r02)*(r02))))+(((sj4)*((r12)*(r12))))));
dummyeval[0]=((((sj4)*((r02)*(r02))))+(((sj4)*((r12)*(r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r22;
evalcond[2]=r22;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r21)))+IKsqr(r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r21)), r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign(((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12)))));
dummyeval[0]=((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((r02)*(r02))))+(((IkReal(-1.00000000000000))*((r12)*(r12))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((r02)*(r02))))+(((IkReal(-1.00000000000000))*((r12)*(r12)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst8)*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst8)*(r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst8)*(r02)), ((IkReal(-1.00000000000000))*(gconst8)*(r12)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x100=IKsin(j3);
IkReal x101=IKcos(j3);
IkReal x102=((IkReal(1.00000000000000))*(x100));
evalcond[0]=((((r02)*(x101)))+(((r12)*(x100))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)))+(((r10)*(x100)))+(((r00)*(x101))));
evalcond[2]=((((r01)*(x101)))+(((r11)*(x100)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[3]=((IkReal(-1.00000000000000))+(((r12)*(x101)))+(((IkReal(-1.00000000000000))*(r02)*(x102))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x102)))+(((r11)*(x101))));
evalcond[5]=((((r10)*(x101)))+(((IkReal(-1.00000000000000))*(r00)*(x102))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x103=((gconst9)*(sj5));
if( IKabs(((r02)*(x103))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x103))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x103)), ((IkReal(-1.00000000000000))*(r12)*(x103)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x104=IKsin(j3);
IkReal x105=IKcos(j3);
IkReal x106=((IkReal(1.00000000000000))*(x104));
evalcond[0]=((((r02)*(x105)))+(((r12)*(x104))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)))+(((r10)*(x104)))+(((r00)*(x105))));
evalcond[2]=((((r01)*(x105)))+(((r11)*(x104)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[3]=((IkReal(-1.00000000000000))+(((r12)*(x105)))+(((IkReal(-1.00000000000000))*(r02)*(x106))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x106)))+(((r11)*(x105))));
evalcond[5]=((((r10)*(x105)))+(((IkReal(-1.00000000000000))*(r00)*(x106))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r22;
evalcond[2]=((IkReal(-1.00000000000000))*(r22));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r21)+IKsqr(((IkReal(-1.00000000000000))*(r20)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r21, ((IkReal(-1.00000000000000))*(r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r21)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((IKcos(j5))+(r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((r12)*(r12))+((r02)*(r02))));
dummyeval[0]=(((r12)*(r12))+((r02)*(r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst13;
gconst13=IKsign(((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12)))));
dummyeval[0]=((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x107=((gconst13)*(sj5));
if( IKabs(((r02)*(x107))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x107))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x107)), ((IkReal(-1.00000000000000))*(r12)*(x107)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x108=IKsin(j3);
IkReal x109=IKcos(j3);
IkReal x110=((IkReal(1.00000000000000))*(x108));
evalcond[0]=((((r02)*(x109)))+(((r12)*(x108))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)))+(((r10)*(x108)))+(((r00)*(x109))));
evalcond[2]=((((r01)*(x109)))+(((r11)*(x108)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[3]=((IkReal(1.00000000000000))+(((r12)*(x109)))+(((IkReal(-1.00000000000000))*(r02)*(x110))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x110)))+(((r11)*(x109))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r00)*(x110)))+(((r10)*(x109))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst12)*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst12)*(r12))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst12)*(r02)), ((IkReal(-1.00000000000000))*(gconst12)*(r12)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x111=IKsin(j3);
IkReal x112=IKcos(j3);
IkReal x113=((IkReal(1.00000000000000))*(x111));
evalcond[0]=((((r02)*(x112)))+(((r12)*(x111))));
evalcond[1]=((((r10)*(x111)))+(((IkReal(-1.00000000000000))*(sj5)))+(((r00)*(x112))));
evalcond[2]=((((r11)*(x111)))+(((r01)*(x112)))+(((IkReal(-1.00000000000000))*(cj5))));
evalcond[3]=((IkReal(1.00000000000000))+(((r12)*(x112)))+(((IkReal(-1.00000000000000))*(r02)*(x113))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x113)))+(((r11)*(x112))));
evalcond[5]=((((r10)*(x112)))+(((IkReal(-1.00000000000000))*(r00)*(x113))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(r22));
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=((IkReal(-1.00000000000000))*(r20));
evalcond[5]=((IkReal(-1.00000000000000))*(r21));
evalcond[6]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x114=IKatan2(r02, r12);
j3array[0]=((IkReal(-1.00000000000000))*(x114));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x114))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((r12)*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(r02)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x115=IKsin(j5);
IkReal x116=((IkReal(1.00000000000000))*(sj3));
IkReal x117=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((r10)*(sj3)))+(((cj3)*(r00)))+(((IkReal(-1.00000000000000))*(x115))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x117)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x116)))+(x115)+(((cj3)*(r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(x116)))+(((IkReal(-1.00000000000000))*(x117)))+(((cj3)*(r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x118=((IkReal(-1.00000000000000))+(r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x118;
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=r20;
evalcond[5]=r21;
evalcond[6]=x118;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x119=IKatan2(r02, r12);
j3array[0]=((IkReal(-1.00000000000000))*(x119));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x119))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((r12)*(IKcos(j3))))+(((IkReal(-1.00000000000000))*(r02)*(IKsin(j3)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x120=IKcos(j5);
IkReal x121=((IkReal(1.00000000000000))*(sj3));
IkReal x122=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x122)))+(((cj3)*(r00))));
evalcond[1]=((((r11)*(sj3)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(x120))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x122)))+(((cj3)*(r11)))+(((IkReal(-1.00000000000000))*(r01)*(x121))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(x121)))+(x120)+(((cj3)*(r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x123=((cj4)*(gconst1)*(r22));
if( IKabs(((r02)*(x123))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x123))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x123)), ((IkReal(-1.00000000000000))*(r12)*(x123)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x124=IKcos(j3);
IkReal x125=IKsin(j3);
IkReal x126=((IkReal(1.00000000000000))*(cj4));
IkReal x127=((IkReal(1.00000000000000))*(sj4));
IkReal x128=((r12)*(x124));
IkReal x129=((r02)*(x125));
IkReal x130=((cj4)*(x124));
evalcond[0]=((((r02)*(x124)))+(((r12)*(x125))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x126)))+(x128)+(((IkReal(-1.00000000000000))*(x129))));
evalcond[2]=((((cj4)*(r22)))+(((sj4)*(x128)))+(((IkReal(-1.00000000000000))*(x127)*(x129))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r20)*(x127)))+(((IkReal(-1.00000000000000))*(r00)*(x125)*(x126)))+(((r10)*(x130))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x125)*(x126)))+(((r11)*(x130)))+(((IkReal(-1.00000000000000))*(r21)*(x127))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x126)*(x129)))+(((IkReal(-1.00000000000000))*(r22)*(x127)))+(((cj4)*(x128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x131=((cj3)*(r02));
IkReal x132=((IkReal(1.00000000000000))*(sj3));
IkReal x133=((((IkReal(-1.00000000000000))*(r02)*(x132)))+(((cj3)*(r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(r22));
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=((x131)+(((r12)*(sj3))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(x132)))+(((IkReal(-1.00000000000000))*(x131))));
evalcond[6]=x133;
evalcond[7]=x133;
evalcond[8]=((IkReal(-1.00000000000000))*(r20));
evalcond[9]=((IkReal(-1.00000000000000))*(r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x134=IKsin(j5);
IkReal x135=((IkReal(1.00000000000000))*(sj3));
IkReal x136=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((r10)*(sj3)))+(((cj3)*(r00)))+(((IkReal(-1.00000000000000))*(x134))));
evalcond[1]=((((r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x136)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x135)))+(x134)+(((cj3)*(r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x136)))+(((cj3)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(x135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x137=((IkReal(-1.00000000000000))+(r22));
IkReal x138=((cj3)*(r02));
IkReal x139=((r02)*(sj3));
IkReal x140=((IkReal(1.00000000000000))*(r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x137;
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=((x138)+(((r12)*(sj3))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x138)))+(((IkReal(-1.00000000000000))*(sj3)*(x140))));
evalcond[6]=((((cj3)*(r12)))+(((IkReal(-1.00000000000000))*(x139))));
evalcond[7]=((x139)+(((IkReal(-1.00000000000000))*(cj3)*(x140))));
evalcond[8]=r20;
evalcond[9]=r21;
evalcond[10]=x137;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x141=IKcos(j5);
IkReal x142=((IkReal(1.00000000000000))*(sj3));
IkReal x143=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x143)))+(((r10)*(sj3)))+(((cj3)*(r00))));
evalcond[1]=((((r11)*(sj3)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(x141))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(r01)*(x142)))+(((cj3)*(r11))));
evalcond[3]=((x141)+(((IkReal(-1.00000000000000))*(r00)*(x142)))+(((cj3)*(r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x144=IKsin(j5);
IkReal x145=IKcos(j5);
IkReal x146=((cj3)*(r10));
IkReal x147=((IkReal(1.00000000000000))*(sj4));
IkReal x148=((r01)*(sj3));
IkReal x149=((cj3)*(r11));
IkReal x150=((r00)*(sj3));
IkReal x151=((IkReal(1.00000000000000))*(x145));
evalcond[0]=((r21)+(((cj4)*(x144))));
evalcond[1]=((r20)+(((IkReal(-1.00000000000000))*(cj4)*(x151))));
evalcond[2]=((((r10)*(sj3)))+(((cj3)*(r00)))+(((IkReal(-1.00000000000000))*(x144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x151)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[4]=((((sj4)*(x144)))+(x149)+(((IkReal(-1.00000000000000))*(x148))));
evalcond[5]=((x146)+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x145)*(x147))));
evalcond[6]=((((cj4)*(r21)))+(((sj4)*(x149)))+(x144)+(((IkReal(-1.00000000000000))*(x147)*(x148))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x151)))+(((cj4)*(r20)))+(((sj4)*(x146)))+(((IkReal(-1.00000000000000))*(x147)*(x150))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x152=IKsin(j5);
IkReal x153=IKcos(j5);
IkReal x154=((cj3)*(r10));
IkReal x155=((IkReal(1.00000000000000))*(sj4));
IkReal x156=((r01)*(sj3));
IkReal x157=((cj3)*(r11));
IkReal x158=((r00)*(sj3));
IkReal x159=((IkReal(1.00000000000000))*(x153));
evalcond[0]=((((cj4)*(x152)))+(r21));
evalcond[1]=((r20)+(((IkReal(-1.00000000000000))*(cj4)*(x159))));
evalcond[2]=((((r10)*(sj3)))+(((cj3)*(r00)))+(((IkReal(-1.00000000000000))*(x152))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x159)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[4]=((((sj4)*(x152)))+(x157)+(((IkReal(-1.00000000000000))*(x156))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x153)*(x155)))+(x154)+(((IkReal(-1.00000000000000))*(x158))));
evalcond[6]=((((cj4)*(r21)))+(((sj4)*(x157)))+(x152)+(((IkReal(-1.00000000000000))*(x155)*(x156))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x159)))+(((cj4)*(r20)))+(((sj4)*(x154)))+(((IkReal(-1.00000000000000))*(x155)*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst3)*(r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst3)*(r21)), ((gconst3)*(r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x160=IKsin(j5);
IkReal x161=IKcos(j5);
IkReal x162=((cj3)*(r10));
IkReal x163=((IkReal(1.00000000000000))*(sj4));
IkReal x164=((r01)*(sj3));
IkReal x165=((cj3)*(r11));
IkReal x166=((r00)*(sj3));
IkReal x167=((IkReal(1.00000000000000))*(x161));
evalcond[0]=((((cj4)*(x160)))+(r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x167)))+(r20));
evalcond[2]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x160)))+(((cj3)*(r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x167)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[4]=((x165)+(((IkReal(-1.00000000000000))*(x164)))+(((sj4)*(x160))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x161)*(x163)))+(x162)+(((IkReal(-1.00000000000000))*(x166))));
evalcond[6]=((((cj4)*(r21)))+(((IkReal(-1.00000000000000))*(x163)*(x164)))+(x160)+(((sj4)*(x165))));
evalcond[7]=((((cj4)*(r20)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x163)*(x166)))+(((sj4)*(x162))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x168=((cj4)*(gconst0));
if( IKabs(((r02)*(x168))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x168))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x168)), ((IkReal(-1.00000000000000))*(r12)*(x168)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x169=IKcos(j3);
IkReal x170=IKsin(j3);
IkReal x171=((IkReal(1.00000000000000))*(cj4));
IkReal x172=((IkReal(1.00000000000000))*(sj4));
IkReal x173=((r12)*(x169));
IkReal x174=((r02)*(x170));
IkReal x175=((cj4)*(x169));
evalcond[0]=((((r12)*(x170)))+(((r02)*(x169))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(x174)))+(x173));
evalcond[2]=((((cj4)*(r22)))+(((sj4)*(x173)))+(((IkReal(-1.00000000000000))*(x172)*(x174))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(x170)*(x171)))+(((r10)*(x175)))+(((IkReal(-1.00000000000000))*(r20)*(x172))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x170)*(x171)))+(((IkReal(-1.00000000000000))*(r21)*(x172)))+(((r11)*(x175))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r22)*(x172)))+(((cj4)*(x173)))+(((IkReal(-1.00000000000000))*(x171)*(x174))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj4);
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x176=((cj3)*(r02));
IkReal x177=((IkReal(1.00000000000000))*(sj3));
IkReal x178=((((IkReal(-1.00000000000000))*(r02)*(x177)))+(((cj3)*(r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(1.00000000000000))+(r22));
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=((x176)+(((r12)*(sj3))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x176)))+(((IkReal(-1.00000000000000))*(r12)*(x177))));
evalcond[6]=x178;
evalcond[7]=x178;
evalcond[8]=((IkReal(-1.00000000000000))*(r20));
evalcond[9]=((IkReal(-1.00000000000000))*(r21));
evalcond[10]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x179=IKsin(j5);
IkReal x180=((IkReal(1.00000000000000))*(sj3));
IkReal x181=((IkReal(1.00000000000000))*(IKcos(j5)));
evalcond[0]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x179)))+(((cj3)*(r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x181)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x180)))+(x179)+(((cj3)*(r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(x180)))+(((IkReal(-1.00000000000000))*(x181)))+(((cj3)*(r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x182=((IkReal(-1.00000000000000))+(r22));
IkReal x183=((cj3)*(r02));
IkReal x184=((r02)*(sj3));
IkReal x185=((IkReal(1.00000000000000))*(r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=x182;
evalcond[2]=r21;
evalcond[3]=r20;
evalcond[4]=((x183)+(((r12)*(sj3))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(sj3)*(x185))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x184)))+(((cj3)*(r12))));
evalcond[7]=((x184)+(((IkReal(-1.00000000000000))*(cj3)*(x185))));
evalcond[8]=r20;
evalcond[9]=r21;
evalcond[10]=x182;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x186=IKcos(j5);
IkReal x187=((IkReal(1.00000000000000))*(sj3));
IkReal x188=((IkReal(1.00000000000000))*(IKsin(j5)));
evalcond[0]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x188)))+(((cj3)*(r00))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x186)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x187)))+(((IkReal(-1.00000000000000))*(x188)))+(((cj3)*(r11))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r00)*(x187)))+(x186)+(((cj3)*(r10))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r11)*(sj3)))+(((cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((r11)*(sj3)))+(((cj3)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r21)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((r11)*(sj3)))+(((cj3)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x189=IKsin(j5);
IkReal x190=IKcos(j5);
IkReal x191=((cj3)*(r10));
IkReal x192=((IkReal(1.00000000000000))*(sj4));
IkReal x193=((r01)*(sj3));
IkReal x194=((cj3)*(r11));
IkReal x195=((r00)*(sj3));
IkReal x196=((IkReal(1.00000000000000))*(x190));
evalcond[0]=((r21)+(((cj4)*(x189))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x196)))+(r20));
evalcond[2]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x189)))+(((cj3)*(r00))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x196)))+(((r11)*(sj3)))+(((cj3)*(r01))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x193)))+(x194)+(((sj4)*(x189))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(x195)))+(x191));
evalcond[6]=((((cj4)*(r21)))+(((IkReal(-1.00000000000000))*(x192)*(x193)))+(x189)+(((sj4)*(x194))));
evalcond[7]=((((cj4)*(r20)))+(((IkReal(-1.00000000000000))*(x192)*(x195)))+(((IkReal(-1.00000000000000))*(x196)))+(((sj4)*(x191))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r10)*(sj3)))+(((cj3)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r10)*(sj3)))+(((cj3)*(r00)))))+IKsqr(((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r10)*(sj3)))+(((cj3)*(r00)))), ((r20)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x197=IKsin(j5);
IkReal x198=IKcos(j5);
IkReal x199=((cj3)*(r10));
IkReal x200=((IkReal(1.00000000000000))*(sj4));
IkReal x201=((r01)*(sj3));
IkReal x202=((cj3)*(r11));
IkReal x203=((r00)*(sj3));
IkReal x204=((IkReal(1.00000000000000))*(x198));
evalcond[0]=((((cj4)*(x197)))+(r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x204)))+(r20));
evalcond[2]=((((r10)*(sj3)))+(((IkReal(-1.00000000000000))*(x197)))+(((cj3)*(r00))));
evalcond[3]=((((r11)*(sj3)))+(((IkReal(-1.00000000000000))*(x204)))+(((cj3)*(r01))));
evalcond[4]=((x202)+(((sj4)*(x197)))+(((IkReal(-1.00000000000000))*(x201))));
evalcond[5]=((x199)+(((IkReal(-1.00000000000000))*(x198)*(x200)))+(((IkReal(-1.00000000000000))*(x203))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x200)*(x201)))+(((cj4)*(r21)))+(x197)+(((sj4)*(x202))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x200)*(x203)))+(((cj4)*(r20)))+(((IkReal(-1.00000000000000))*(x204)))+(((sj4)*(x199))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst3)*(r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst3)*(r21)), ((gconst3)*(r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x205=IKsin(j5);
IkReal x206=IKcos(j5);
IkReal x207=((cj3)*(r10));
IkReal x208=((IkReal(1.00000000000000))*(sj4));
IkReal x209=((r01)*(sj3));
IkReal x210=((cj3)*(r11));
IkReal x211=((r00)*(sj3));
IkReal x212=((IkReal(1.00000000000000))*(x206));
evalcond[0]=((((cj4)*(x205)))+(r21));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x212)))+(r20));
evalcond[2]=((((r10)*(sj3)))+(((cj3)*(r00)))+(((IkReal(-1.00000000000000))*(x205))));
evalcond[3]=((((r11)*(sj3)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(x212))));
evalcond[4]=((x210)+(((sj4)*(x205)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x206)*(x208)))+(x207)+(((IkReal(-1.00000000000000))*(x211))));
evalcond[6]=((((cj4)*(r21)))+(((IkReal(-1.00000000000000))*(x208)*(x209)))+(x205)+(((sj4)*(x210))));
evalcond[7]=((((cj4)*(r20)))+(((sj4)*(x207)))+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(x208)*(x211))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(gconst2)*(r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(gconst2)*(r21)), ((gconst2)*(r20)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r21)+(((cj4)*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(IKcos(j5))))+(r20));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12)))));
dummyeval[0]=((((r02)*(r10)))+(((IkReal(-1.00000000000000))*(r00)*(r12))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(-1.00000000000000))*(r01)*(r12)))+(((r02)*(r11)))));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r01)*(r12)))+(((r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x213=((cj5)*(gconst5));
if( IKabs(((r02)*(x213))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x213))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x213)), ((IkReal(-1.00000000000000))*(r12)*(x213)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x214=IKsin(j3);
IkReal x215=IKcos(j3);
IkReal x216=((IkReal(1.00000000000000))*(cj5));
IkReal x217=((IkReal(1.00000000000000))*(sj4));
IkReal x218=((IkReal(1.00000000000000))*(x214));
IkReal x219=((r10)*(x215));
IkReal x220=((sj4)*(x215));
IkReal x221=((cj4)*(x215));
evalcond[0]=((((r12)*(x214)))+(((r02)*(x215))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)))+(((r00)*(x215)))+(((r10)*(x214))));
evalcond[2]=((((r11)*(x214)))+(((r01)*(x215)))+(((IkReal(-1.00000000000000))*(x216))));
evalcond[3]=((((r12)*(x215)))+(((IkReal(-1.00000000000000))*(r02)*(x218)))+(((IkReal(-1.00000000000000))*(cj4))));
evalcond[4]=((((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(x218)))+(((r11)*(x215))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj4)*(x216)))+(x219)+(((IkReal(-1.00000000000000))*(r00)*(x218))));
evalcond[6]=((((cj4)*(r22)))+(((r12)*(x220)))+(((IkReal(-1.00000000000000))*(r02)*(x214)*(x217))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r20)*(x217)))+(((cj4)*(x219)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x218))));
evalcond[8]=((((r11)*(x221)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(x218)))+(((IkReal(-1.00000000000000))*(r21)*(x217))));
evalcond[9]=((IkReal(-1.00000000000000))+(((r12)*(x221)))+(((IkReal(-1.00000000000000))*(r22)*(x217)))+(((IkReal(-1.00000000000000))*(cj4)*(r02)*(x218))));
evalcond[10]=((sj5)+(((cj4)*(r21)))+(((r11)*(x220)))+(((IkReal(-1.00000000000000))*(r01)*(x214)*(x217))));
evalcond[11]=((((cj4)*(r20)))+(((IkReal(-1.00000000000000))*(r00)*(x214)*(x217)))+(((IkReal(-1.00000000000000))*(x216)))+(((sj4)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x222=((gconst4)*(sj5));
if( IKabs(((r02)*(x222))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(r12)*(x222))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((r02)*(x222)), ((IkReal(-1.00000000000000))*(r12)*(x222)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x223=IKsin(j3);
IkReal x224=IKcos(j3);
IkReal x225=((IkReal(1.00000000000000))*(cj5));
IkReal x226=((IkReal(1.00000000000000))*(sj4));
IkReal x227=((IkReal(1.00000000000000))*(x223));
IkReal x228=((r10)*(x224));
IkReal x229=((sj4)*(x224));
IkReal x230=((cj4)*(x224));
evalcond[0]=((((r12)*(x223)))+(((r02)*(x224))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)))+(((r00)*(x224)))+(((r10)*(x223))));
evalcond[2]=((((r01)*(x224)))+(((r11)*(x223)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x227)))+(((r12)*(x224)))+(((IkReal(-1.00000000000000))*(cj4))));
evalcond[4]=((((r11)*(x224)))+(((IkReal(-1.00000000000000))*(r01)*(x227)))+(((sj4)*(sj5))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj4)*(x225)))+(x228)+(((IkReal(-1.00000000000000))*(r00)*(x227))));
evalcond[6]=((((cj4)*(r22)))+(((r12)*(x229)))+(((IkReal(-1.00000000000000))*(r02)*(x223)*(x226))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r20)*(x226)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x227)))+(((cj4)*(x228))));
evalcond[8]=((((r11)*(x230)))+(((IkReal(-1.00000000000000))*(r21)*(x226)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(x227))));
evalcond[9]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(cj4)*(r02)*(x227)))+(((r12)*(x230)))+(((IkReal(-1.00000000000000))*(r22)*(x226))));
evalcond[10]=((sj5)+(((cj4)*(r21)))+(((r11)*(x229)))+(((IkReal(-1.00000000000000))*(r01)*(x223)*(x226))));
evalcond[11]=((((sj4)*(x228)))+(((cj4)*(r20)))+(((IkReal(-1.00000000000000))*(r00)*(x223)*(x226)))+(((IkReal(-1.00000000000000))*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - grips (42cd1e57ce525d117bf2884d2003e33b)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
