/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2013-08-08 17:27:01.244277
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKsin(j[1]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKcos(j[3]);
x5=IKsin(j[3]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[0]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((IkReal(0.190892000000000))*(x5));
x13=((IkReal(0.000787000000000000))*(x4));
x14=((IkReal(0.261090000000000))*(x3));
x15=((IkReal(0.000787000000000000))*(x5));
x16=((IkReal(1.00000000000000))*(x6));
x17=((IkReal(1.00000000000000))*(x5));
x18=((IkReal(1.00000000000000))*(x4));
x19=((IkReal(0.190892000000000))*(x4));
x20=((x10)*(x7));
x21=((x0)*(x2));
x22=((x0)*(x3));
x23=((x1)*(x2));
x24=((x10)*(x6));
x25=((x1)*(x3));
x26=((x1)*(x14));
x27=((IkReal(0.0513310000000000))*(x25));
x28=((IkReal(0.0513310000000000))*(x21));
x29=((IkReal(1.00000000000000))*(x21));
x30=((((IkReal(-0.000787000000000000))*(x7)))+(((IkReal(-0.190892000000000))*(x6))));
x31=((((IkReal(-1.00000000000000))*(x29)))+(x25));
x32=((x22)+(x23));
x33=((((IkReal(-1.00000000000000))*(x27)))+(x28));
x34=((((IkReal(0.133220000000000))*(x25)))+(((IkReal(-0.133220000000000))*(x21))));
x35=((((IkReal(-1.00000000000000))*(x25)))+(x29));
x36=((((IkReal(-1.00000000000000))*(x22)))+(((IkReal(-1.00000000000000))*(x23))));
x37=((((IkReal(-0.133220000000000))*(x22)))+(((IkReal(-0.133220000000000))*(x23))));
x38=((((IkReal(-0.0513310000000000))*(x22)))+(((IkReal(-0.0513310000000000))*(x23))));
x39=((((IkReal(0.133220000000000))*(x22)))+(((IkReal(0.133220000000000))*(x23))));
x40=((IkReal(0.190892000000000))*(x36));
x41=((x35)*(x5));
x42=((x36)*(x5));
x43=((((IkReal(0.00750000000000000))*(x22)))+(((IkReal(0.00750000000000000))*(x23)))+(((IkReal(0.261090000000000))*(x21)))+(((IkReal(0.521670000000000))*(x0)))+(((IkReal(0.00982000000000000))*(x1))));
x44=((((x31)*(x4)))+(x42));
x45=((((IkReal(-1.00000000000000))*(x13)*(x31)))+(((IkReal(-1.00000000000000))*(x15)*(x36))));
x46=((((x19)*(x31)))+(((x12)*(x36))));
x47=((x45)*(x6));
x48=((x46)*(x7));
x49=((x24)*(x44));
IkReal x50=((IkReal(1.00000000000000))*(x18));
IkReal x51=((IkReal(1.00000000000000))*(x17));
eetrans[0]=((((x30)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x48)))+(((IkReal(-1.00000000000000))*(x34)*(x50)))+(((IkReal(-1.00000000000000))*(x33)*(x51)))+(((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x38)*(x50)))+(((IkReal(-1.00000000000000))*(x16)*(x45)))+(x43)+(((IkReal(-1.00000000000000))*(x37)*(x51))))))));
eetrans[1]=((((x30)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x43)))+(((x34)*(x4)))+(((x33)*(x5)))+(x48)+(x47)+(x26)+(((x38)*(x4)))+(((x37)*(x5))))))));
eetrans[2]=((IkReal(0.353360000000000))+(((IkReal(-0.00750000000000000))*(x21)))+(((x0)*(x14)))+(((IkReal(0.00750000000000000))*(x25)))+(((x34)*(x5)))+(((IkReal(0.261090000000000))*(x23)))+(((IkReal(0.521670000000000))*(x1)))+(((x38)*(x5)))+(((x39)*(x4)))+(((x4)*(((((IkReal(-1.00000000000000))*(x28)))+(x27)))))+(((IkReal(-0.00982000000000000))*(x0)))+(((x6)*(((((x15)*(x35)))+(((x13)*(x36)))))))+(((x7)*(((((IkReal(-1.00000000000000))*(x12)*(x35)))+(((IkReal(-1.00000000000000))*(x19)*(x36))))))));
eerot[0]=((((IkReal(-1.00000000000000))*(x9)*(((((IkReal(1.00000000000000))*(x10)*(x16)*(x44)))+(((IkReal(1.00000000000000))*(x11)*(((((IkReal(-1.00000000000000))*(x32)*(x4)))+(((IkReal(-1.00000000000000))*(x31)*(x5)))))))))))+(((x20)*(x8))));
eerot[1]=((((x8)*(((x49)+(((x11)*(((((IkReal(-1.00000000000000))*(x18)*(x32)))+(((IkReal(-1.00000000000000))*(x17)*(x31)))))))))))+(((x20)*(x9))));
eerot[2]=((((x11)*(x44)))+(((x24)*(((((IkReal(-1.00000000000000))*(x18)*(x36)))+(((IkReal(-1.00000000000000))*(x17)*(x35))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij0[2], _nj0;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=((IkReal(-1.00000000000000))*(r02));
new_px=((IkReal(0.353360000000000))+(((IkReal(-1.00000000000000))*(pz))));
new_r01=((((IkReal(-1.00000000000000))*(r00)*(IKsin(j0))))+(((r01)*(IKcos(j0)))));
new_py=((((IkReal(-1.00000000000000))*(px)*(IKsin(j0))))+(((py)*(IKcos(j0)))));
new_r02=((((r01)*(IKsin(j0))))+(((r00)*(IKcos(j0)))));
new_pz=((((py)*(IKsin(j0))))+(((px)*(IKcos(j0)))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x52=((IkReal(1.00000000000000))*(pp));
IkReal x53=((IkReal(0.266440000000000))*(px));
IkReal x54=((IkReal(-0.00523288160000000))+(((IkReal(-0.532880000000000))*(py))));
IkReal x55=((IkReal(0.0300000000000000))*(py));
IkReal x56=((IkReal(1.02834000000000))*(px));
IkReal x57=(px)*(px);
IkReal x58=(py)*(py);
IkReal x59=((IkReal(0.000441593409047839))*(r02));
IkReal x60=((pp)*(r00));
IkReal x61=((pp)*(r01));
IkReal x62=((IkReal(0.532880000000000))*(py));
IkReal x63=((IkReal(2.11668000000000))*(py));
IkReal x64=((IkReal(1.06576000000000))*(px));
IkReal x65=((IkReal(0.0600000000000000))*(px));
IkReal x66=((IkReal(2.05668000000000))*(py));
IkReal x67=((IkReal(1.05834000000000))*(px));
IkReal x68=((IkReal(0.768980000000000))*(py));
IkReal x69=((IkReal(1.57724000000000))*(px));
IkReal x70=((IkReal(0.808260000000000))*(py));
IkReal x71=((IkReal(0.236100000000000))*(py));
IkReal x72=((IkReal(0.511480000000000))*(px));
IkReal x73=((IkReal(0.275380000000000))*(py));
IkReal x74=((IkReal(0.255151991468000))*(r01));
IkReal x75=((IkReal(0.291724972540000))*(r00));
IkReal x76=((IkReal(0.00172665236694182))*(r02));
IkReal x77=((IkReal(0.299890589872000))*(r00));
IkReal x78=((IkReal(4.99646346714372e-5))*(r02));
IkReal x79=((IkReal(0.124937037000000))*(r01));
IkReal x80=((IkReal(0.710885729344000))*(r00));
IkReal x81=((IkReal(0.0819319407600000))*(r01));
IkReal x82=((IkReal(0.00225564791707646))*(r02));
IkReal x83=((IkReal(0.0243272976000000))*(r00));
IkReal x84=((IkReal(0.509064279856000))*(r01));
IkReal x85=((IkReal(0.250775426980000))*(r00));
IkReal x86=((IkReal(0.00126281884548697))*(r02));
IkReal x87=((IkReal(0.122134905188000))*(r01));
IkReal x88=((IkReal(5.82772600415942e-5))*(r02));
IkReal x89=((IkReal(0.279217756272000))*(r00));
IkReal x90=((IkReal(0.141592134600000))*(r01));
IkReal x91=((IkReal(0.000162735301862100))*(r02));
IkReal x92=((IkReal(0.406921146600000))*(r01));
IkReal x93=((IkReal(0.165993832272000))*(r00));
IkReal x94=((IkReal(0.146500690388000))*(r01));
IkReal x95=((IkReal(0.240133211060000))*(r00));
IkReal x96=((IkReal(0.00127871021143001))*(r02));
IkReal x97=((IkReal(0.787323558256000))*(r01));
IkReal x98=((IkReal(0.0323204976000000))*(r00));
IkReal x99=((IkReal(0.713965589344000))*(r00));
IkReal x100=((IkReal(0.0252841455600000))*(r01));
IkReal x101=((IkReal(0.00223902266633615))*(r02));
IkReal x102=((IkReal(0.415583044200000))*(r01));
IkReal x103=((IkReal(0.134855235472000))*(r00));
IkReal x104=((IkReal(0.000171047927232257))*(r02));
IkReal x105=((IkReal(0.306399751820000))*(r00));
IkReal x106=((IkReal(0.227706346268000))*(r01));
IkReal x107=((IkReal(0.00169806350807084))*(r02));
IkReal x108=((px)*(r02));
IkReal x109=((py)*(r00));
IkReal x110=((pz)*(r01));
IkReal x111=((px)*(r01));
IkReal x112=((IkReal(4.00000000000000))*(py));
IkReal x113=((py)*(r02));
IkReal x114=((px)*(r00));
IkReal x115=((pz)*(r02));
IkReal x116=((py)*(r01));
IkReal x117=((pz)*(r00));
IkReal x118=((IkReal(2.00000000000000))*(pz));
IkReal x119=((IkReal(8.00000000000000))*(pz));
IkReal x120=((IkReal(0.00412275003666995))*(pp)*(r02));
IkReal x121=((IkReal(0.000423249764264610))*(x110));
IkReal x122=((IkReal(0.000423249764264610))*(x113));
IkReal x123=((r00)*(x67));
IkReal x124=((IkReal(1.05834000000000))*(x115));
IkReal x125=((IkReal(1.05834000000000))*(x116));
IkReal x126=((r00)*(x52));
IkReal x127=((IkReal(0.00207184680342812))*(x113));
IkReal x128=((IkReal(0.502540000000000))*(x116));
IkReal x129=((IkReal(0.502540000000000))*(x115));
IkReal x130=((IkReal(0.502540000000000))*(x114));
IkReal x131=((IkReal(0.00207184680342812))*(x110));
IkReal x132=((r01)*(x52));
IkReal x133=((IkReal(0.0392800000000000))*(x116));
IkReal x134=((IkReal(0.000846499528529221))*(x108));
IkReal x135=((IkReal(2.08668000000000))*(x109));
IkReal x136=((IkReal(0.0392800000000000))*(x114));
IkReal x137=((IkReal(0.0392800000000000))*(x115));
IkReal x138=((IkReal(2.00000000000000))*(x61));
IkReal x139=((IkReal(2.08668000000000))*(x111));
IkReal x140=((IkReal(0.000846499528529221))*(x117));
IkReal x141=((IkReal(0.0392800000000000))*(x109));
IkReal x142=((IkReal(2.00000000000000))*(x60));
IkReal x143=((IkReal(0.00430563522829663))*(x117));
IkReal x144=((IkReal(2.08668000000000))*(x115));
IkReal x145=((IkReal(2.08668000000000))*(x116));
IkReal x146=((IkReal(2.08668000000000))*(x114));
IkReal x147=((IkReal(0.0392800000000000))*(x111));
IkReal x148=((IkReal(0.00430563522829663))*(x108));
IkReal x149=((IkReal(1.02834000000000))*(x116));
IkReal x150=((IkReal(1.02834000000000))*(x115));
IkReal x151=((r00)*(x56));
IkReal x152=((IkReal(0.00223378842486851))*(x110));
IkReal x153=((IkReal(0.541820000000000))*(x114));
IkReal x154=((IkReal(0.00223378842486851))*(x113));
IkReal x155=((IkReal(0.541820000000000))*(x115));
IkReal x156=((IkReal(0.541820000000000))*(x116));
IkReal x157=((IkReal(-0.532880000000000))*(py));
IkReal x158=((IkReal(0.00414369360685623))*(x117));
IkReal x159=((IkReal(0.00414369360685623))*(x108));
IkReal x160=((IkReal(4.00000000000000))*(x60));
IkReal x161=((IkReal(0.00169299905705844))*(x113));
IkReal x162=((IkReal(4.00000000000000))*(x61));
IkReal x163=((IkReal(0.00861127045659326))*(x110));
IkReal x164=((IkReal(0.00861127045659326))*(x113));
IkReal x165=((IkReal(0.00446757684973702))*(x108));
IkReal x166=((IkReal(0.00446757684973702))*(x117));
IkReal x167=((IkReal(-0.00523288160000000))+(x62));
IkReal x168=((IkReal(1.16100200000000))*(x109));
IkReal x169=((IkReal(0.00478652103807388))*(x117));
IkReal x170=((IkReal(1.16100200000000))*(x111));
IkReal x171=((IkReal(0.00478652103807388))*(x108));
IkReal x172=((IkReal(0.236100000000000))*(x111));
IkReal x173=((r00)*(x71));
IkReal x174=((IkReal(0.000970182029629319))*(x110));
IkReal x175=((IkReal(0.000970182029629319))*(x113));
IkReal x176=((IkReal(0.925678000000000))*(x111));
IkReal x177=((IkReal(0.00381633900844457))*(x117));
IkReal x178=((IkReal(0.00381633900844457))*(x108));
IkReal x179=((IkReal(0.925678000000000))*(x109));
IkReal x180=((IkReal(0.275380000000000))*(x111));
IkReal x181=((r00)*(x73));
IkReal x182=((r00)*(x68));
IkReal x183=((IkReal(0.768980000000000))*(x111));
IkReal x184=((IkReal(0.00394002150954466))*(x108));
IkReal x185=((IkReal(0.955678000000000))*(x109));
IkReal x186=((IkReal(0.00394002150954466))*(x117));
IkReal x187=((IkReal(0.955678000000000))*(x111));
IkReal x188=((IkReal(0.000722817027429122))*(x110));
IkReal x189=((IkReal(0.000722817027429122))*(x113));
IkReal x190=((r00)*(x70));
IkReal x191=((IkReal(0.808260000000000))*(x111));
IkReal x192=((IkReal(0.00466283853697379))*(x108));
IkReal x193=((IkReal(1.13100200000000))*(x111));
IkReal x194=((IkReal(0.00466283853697379))*(x117));
IkReal x195=((IkReal(1.13100200000000))*(x109));
IkReal x196=((r01)*(x58));
IkReal x197=((r00)*(x57));
IkReal x198=((x52)+(x67));
IkReal x199=((IkReal(2.00000000000000))*(px)*(x109));
IkReal x200=((IkReal(0.00824550007333990))*(pz)*(x115));
IkReal x201=((IkReal(2.00000000000000))*(x196));
IkReal x202=((IkReal(0.00824550007333990))*(py)*(x110));
IkReal x203=((x113)*(x118));
IkReal x204=((IkReal(0.00824550007333990))*(pz)*(x114));
IkReal x205=((IkReal(2.00000000000000))*(py)*(x111));
IkReal x206=((IkReal(2.00000000000000))*(x197));
IkReal x207=((x108)*(x118));
IkReal x208=((x112)*(x115));
IkReal x209=((IkReal(4.00000000000000))*(px)*(x109));
IkReal x210=((IkReal(4.00000000000000))*(x196));
IkReal x211=((IkReal(4.00000000000000))*(pz)*(x108));
IkReal x212=((IkReal(4.00000000000000))*(x197));
IkReal x213=((x111)*(x112));
IkReal x214=((IkReal(8.00000000000000))*(x196));
IkReal x215=((x113)*(x119));
IkReal x216=((IkReal(8.00000000000000))*(px)*(x109));
IkReal x217=((x56)+(x52));
IkReal x218=((x102)+(x103));
IkReal x219=((x89)+(x90));
IkReal x220=((x55)+(x69));
IkReal x221=((x72)+(x55));
IkReal x222=((x122)+(x60));
IkReal x223=((x104)+(x190));
IkReal x224=((x141)+(x82));
IkReal x225=((x105)+(x192));
IkReal x226=((x178)+(x87));
IkReal x227=((x182)+(x91));
IkReal x228=((x181)+(x88));
IkReal x229=((x173)+(x78));
IkReal x230=((x140)+(x138));
IkReal x231=((x126)+(x122));
IkReal x232=((x171)+(x131));
IkReal x233=((x160)+(x161));
IkReal x234=((x169)+(x75)+(x74));
IkReal x235=((x120)+(x107)+(x195));
IkReal x236=((x177)+(x152)+(x85));
IkReal x237=((x120)+(x187)+(x96));
IkReal x238=((x168)+(x120)+(x76));
IkReal x239=((x152)+(x106)+(x194));
IkReal x240=((x148)+(x188)+(x99));
IkReal x241=((x176)+(x120)+(x86));
IkReal x242=((x175)+(x142)+(x148));
IkReal x243=((x124)+(x125)+(x123));
IkReal x244=((x156)+(x155)+(x153));
IkReal x245=((x130)+(x128)+(x129));
IkReal x246=((x174)+(x143)+(x80)+(x81));
IkReal x247=((x131)+(x184)+(x95)+(x94));
IkReal x248=((x142)+(x143)+(x100)+(x189));
IkReal x249=((x151)+(x150)+(x149)+(x191));
IkReal x250=((x151)+(x150)+(x149)+(x180));
IkReal x251=((x211)+(x212)+(x213));
IkReal x252=((x154)+(x244));
IkReal x253=((x199)+(x203)+(x201));
IkReal x254=((x127)+(x245));
IkReal x255=((x204)+(x202)+(x200));
IkReal x256=((x214)+(x215)+(x216));
IkReal x257=((x144)+(x145)+(x146)+(x147));
IkReal x258=((x135)+(x137)+(x136)+(x133)+(x59));
IkReal x259=((((IkReal(0.00169299905705844))*(x110)))+(((IkReal(8.00000000000000))*(py)*(x111)))+(((x108)*(x119)))+(((IkReal(8.00000000000000))*(x197))));
IkReal x260=((x134)+(x210)+(x209)+(x208));
IkReal x261=((x121)+(x207)+(x206)+(x205));
IkReal x262=((x179)+(x255));
op[0]=((IkReal(-0.388778202406000))+(((IkReal(-1.00000000000000))*(x198)))+(x68));
op[1]=((IkReal(-0.127315423160000))+(((IkReal(-1.00000000000000))*(x53))));
op[2]=((IkReal(-0.823093390800000))+(((IkReal(-1.00000000000000))*(x220))));
op[3]=x54;
op[4]=((IkReal(-0.388616599206000))+(((IkReal(-1.00000000000000))*(x70)))+(((IkReal(-1.00000000000000))*(x217))));
op[5]=((IkReal(0.150672086440000))+(x53));
op[6]=((IkReal(-0.154668686440000))+(((IkReal(-1.00000000000000))*(x53))));
op[7]=((IkReal(-0.254881444806000))+(((IkReal(-1.00000000000000))*(x198)))+(x71));
op[8]=x54;
op[9]=((IkReal(-0.267118371600000))+(((IkReal(-1.00000000000000))*(x221))));
op[10]=((IkReal(0.123318823160000))+(x53));
op[11]=((IkReal(-0.244254078406000))+(((IkReal(-1.00000000000000))*(x73)))+(((IkReal(-1.00000000000000))*(x217))));
op[12]=((((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x234)))+(x253)+(x238)+(x232)+(((IkReal(-1.00000000000000))*(x255)))+(((IkReal(-1.00000000000000))*(x254))));
op[13]=((((IkReal(-1.00000000000000))*(x77)))+(x172)+(x222)+(x79)+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x229))));
op[14]=((x224)+(x242)+(((IkReal(-1.00000000000000))*(x246)))+(((IkReal(-1.00000000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x257))));
op[15]=((x139)+(x230)+(x84)+(((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-1.00000000000000))*(x83)))+(((IkReal(-1.00000000000000))*(x258))));
op[16]=((x154)+(((IkReal(-1.00000000000000))*(x236)))+(x226)+(x241)+(x61)+(((IkReal(-1.00000000000000))*(x244)))+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x253))));
op[17]=((((IkReal(-1.00000000000000))*(x231)))+(x219)+(x250)+(x261)+(((IkReal(-1.00000000000000))*(x228))));
op[18]=((((IkReal(-1.00000000000000))*(x183)))+(((IkReal(-1.00000000000000))*(x231)))+(x227)+(x261)+(x243)+(x93)+(((IkReal(-1.00000000000000))*(x92))));
op[19]=((x127)+(x185)+(x186)+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x237)))+(x255)+(x253)+(((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(x247))));
op[20]=((((IkReal(-1.00000000000000))*(x139)))+(((IkReal(-1.00000000000000))*(x230)))+(x258)+(x260)+(x98)+(((IkReal(-1.00000000000000))*(x97))));
op[21]=((((IkReal(-1.00000000000000))*(x101)))+(x141)+(x248)+(((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x251)))+(((IkReal(-1.00000000000000))*(x257))));
op[22]=((x223)+(x222)+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(x261))));
op[23]=((x193)+(((IkReal(-1.00000000000000))*(x235)))+(x255)+(x239)+(x61)+(((IkReal(-1.00000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(x253)))+(((IkReal(-1.00000000000000))*(x252))));
op[24]=((((IkReal(-1.53796000000000))*(px)))+(((IkReal(-1.00000000000000))*(x63))));
op[25]=x157;
op[26]=((((IkReal(-3.15448000000000))*(py)))+(x65));
op[27]=x64;
op[28]=((((IkReal(1.61652000000000))*(px)))+(((IkReal(-1.00000000000000))*(x66))));
op[29]=x62;
op[30]=x157;
op[31]=((((IkReal(-0.472200000000000))*(px)))+(((IkReal(-1.00000000000000))*(x63))));
op[32]=x64;
op[33]=((((IkReal(-1.02296000000000))*(py)))+(x65));
op[34]=x62;
op[35]=((((IkReal(0.550760000000000))*(px)))+(((IkReal(-1.00000000000000))*(x66))));
op[36]=((((IkReal(-0.583449945080000))*(r01)))+(((IkReal(0.00957304207614777))*(x113)))+(((IkReal(-1.00000000000000))*(x158)))+(((IkReal(0.510303982936000))*(r00)))+(((IkReal(-0.00957304207614777))*(x110)))+(x159)+(x142)+(((IkReal(-1.00000000000000))*(x251))));
op[37]=((((IkReal(-0.599781179744000))*(r01)))+(x230)+(((IkReal(-1.00000000000000))*(x260)))+(((IkReal(-0.249874074000000))*(r00))));
op[38]=((((IkReal(0.163863881520000))*(r00)))+(((IkReal(-1.00000000000000))*(x163)))+(((IkReal(0.00194036405925864))*(x117)))+(x162)+(x164)+(((IkReal(-1.42177145868800))*(r01)))+(((IkReal(-0.00194036405925864))*(x108)))+(((IkReal(-1.00000000000000))*(x256))));
op[39]=((((IkReal(-1.01812855971200))*(r00)))+(((IkReal(-1.00000000000000))*(x233)))+(x259)+(((IkReal(-0.0486545952000000))*(r01))));
op[40]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-0.00763267801688913))*(x110)))+(((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-0.501550853960000))*(r01)))+(x166)+(x251)+(((IkReal(-0.244269810376000))*(r00)))+(((IkReal(0.00763267801688913))*(x113))));
op[41]=((((IkReal(-0.283184269200000))*(r00)))+(((IkReal(-1.00000000000000))*(x230)))+(x260)+(((IkReal(0.558435512544000))*(r01))));
op[42]=((((IkReal(0.813842293200000))*(r00)))+(((IkReal(-1.00000000000000))*(x230)))+(x260)+(((IkReal(0.331987664544000))*(r01))));
op[43]=((((IkReal(0.00788004301908933))*(x110)))+(((IkReal(-1.00000000000000))*(x159)))+(((IkReal(-0.00788004301908933))*(x113)))+(x158)+(x142)+(((IkReal(0.293001380776000))*(r00)))+(((IkReal(-0.480266422120000))*(r01)))+(((IkReal(-1.00000000000000))*(x251))));
op[44]=((x233)+(((IkReal(0.0646409952000000))*(r01)))+(((IkReal(-1.00000000000000))*(x259)))+(((IkReal(1.57464711651200))*(r00))));
op[45]=((((IkReal(-0.00144563405485824))*(x108)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.42793117868800))*(r01)))+(x162)+(x163)+(((IkReal(0.00144563405485824))*(x117)))+(((IkReal(-0.0505682911200000))*(r00)))+(((IkReal(-1.00000000000000))*(x256))));
op[46]=((((IkReal(-0.269710470944000))*(r01)))+(x230)+(((IkReal(0.831166088400000))*(r00)))+(((IkReal(-1.00000000000000))*(x260))));
op[47]=((((IkReal(-0.00932567707394757))*(x113)))+(((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-0.612799503640000))*(r01)))+(((IkReal(-0.455412692536000))*(r00)))+(x165)+(x251)+(((IkReal(0.00932567707394757))*(x110))));
op[48]=((IkReal(-0.388778202406000))+(x67)+(((IkReal(-1.00000000000000))*(x68)))+(((IkReal(-1.00000000000000))*(x52))));
op[49]=((IkReal(-0.127315423160000))+(x53));
op[50]=((IkReal(-0.823093390800000))+(x220));
op[51]=x167;
op[52]=((IkReal(-0.388616599206000))+(x70)+(x56)+(((IkReal(-1.00000000000000))*(x52))));
op[53]=((IkReal(0.150672086440000))+(((IkReal(-1.00000000000000))*(x53))));
op[54]=((IkReal(-0.154668686440000))+(x53));
op[55]=((IkReal(-0.254881444806000))+(((IkReal(-1.00000000000000))*(x71)))+(x67)+(((IkReal(-1.00000000000000))*(x52))));
op[56]=x167;
op[57]=((IkReal(-0.267118371600000))+(x221));
op[58]=((IkReal(0.123318823160000))+(((IkReal(-1.00000000000000))*(x53))));
op[59]=((IkReal(-0.244254078406000))+(x73)+(x56)+(((IkReal(-1.00000000000000))*(x52))));
op[60]=((((IkReal(-1.00000000000000))*(x170)))+(x127)+(((IkReal(-1.00000000000000))*(x232)))+(x238)+(x234)+(x61)+(((IkReal(-1.00000000000000))*(x245)))+(((IkReal(-1.00000000000000))*(x255)))+(((IkReal(-1.00000000000000))*(x253))));
op[61]=((((IkReal(-1.00000000000000))*(x79)))+(x172)+(((IkReal(-1.00000000000000))*(x231)))+(x261)+(x77)+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x229))));
op[62]=((x251)+(x224)+(x246)+(((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(x257))));
op[63]=((x139)+(((IkReal(-1.00000000000000))*(x230)))+(x260)+(x83)+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x258))));
op[64]=((((IkReal(-1.00000000000000))*(x132)))+(x253)+(x236)+(x241)+(((IkReal(-1.00000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(x226)))+(((IkReal(-1.00000000000000))*(x252))));
op[65]=((x250)+(x222)+(((IkReal(-1.00000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(x261)))+(((IkReal(-1.00000000000000))*(x228))));
op[66]=((((IkReal(-1.00000000000000))*(x183)))+(x222)+(x227)+(x243)+(x92)+(((IkReal(-1.00000000000000))*(x93)))+(((IkReal(-1.00000000000000))*(x261))));
op[67]=((((IkReal(-1.00000000000000))*(x186)))+(x185)+(((IkReal(-1.00000000000000))*(x237)))+(x255)+(x247)+(x61)+(((IkReal(-1.00000000000000))*(x254)))+(((IkReal(-1.00000000000000))*(x253))));
op[68]=((((IkReal(-1.00000000000000))*(x139)))+(x258)+(x230)+(x97)+(((IkReal(-1.00000000000000))*(x98)))+(((IkReal(-1.00000000000000))*(x260))));
op[69]=((((IkReal(-1.00000000000000))*(x101)))+(x141)+(x251)+(x240)+(((IkReal(-1.00000000000000))*(x248)))+(((IkReal(-1.00000000000000))*(x257))));
op[70]=((((IkReal(-1.00000000000000))*(x231)))+(x218)+(x223)+(x261)+(((IkReal(-1.00000000000000))*(x249))));
op[71]=((x154)+(x193)+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(x235)))+(x255)+(x253)+(x225)+(((IkReal(-1.00000000000000))*(x244))));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
j2array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj2)));
j3array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj3)));
IkReal x263=(htj1)*(htj1);
IkReal x264=(htj2)*(htj2);
IkReal x265=(htj3)*(htj3);
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x263))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x263)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x263))))));
cj2array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x264))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x264)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x264))))));
cj3array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x265))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x265)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x265))))));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj2array[numsolutions]=((IkReal(2.00000000000000))*(htj2)*(((IKabs(((IkReal(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
sj3array[numsolutions]=((IkReal(2.00000000000000))*(htj3)*(((IKabs(((IkReal(1.00000000000000))+((htj3)*(htj3)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj3)*(htj3))))):(IkReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
IkReal x266=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj1)*(cj2)*(py)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x266)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x266)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x267=((IkReal(5.23847517560207))*(cj2));
IkReal x268=((py)*(sj1));
IkReal x269=((cj1)*(px));
IkReal x270=((IkReal(0.0215969237223081))*(cj2));
IkReal x271=((px)*(sj1)*(sj2));
IkReal x272=((cj1)*(py)*(sj2));
if( IKabs(((IkReal(0.00303911910620319))+(((IkReal(0.0215969237223081))*(x272)))+(((IkReal(0.000212081790953065))*(sj2)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x271)))+(((x269)*(x270)))+(((IkReal(0.0112664671982164))*(cj2)))+(((x268)*(x270))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.737158226710723))+(((IkReal(-0.0514418262244123))*(sj2)))+(((IkReal(-2.73275534485633))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(5.23847517560207))*(x271)))+(((IkReal(-1.00000000000000))*(x267)*(x269)))+(((IkReal(-1.00000000000000))*(x267)*(x268)))+(((IkReal(-5.23847517560207))*(x272))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00303911910620319))+(((IkReal(0.0215969237223081))*(x272)))+(((IkReal(0.000212081790953065))*(sj2)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x271)))+(((x269)*(x270)))+(((IkReal(0.0112664671982164))*(cj2)))+(((x268)*(x270)))))+IKsqr(((IkReal(-0.737158226710723))+(((IkReal(-0.0514418262244123))*(sj2)))+(((IkReal(-2.73275534485633))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(5.23847517560207))*(x271)))+(((IkReal(-1.00000000000000))*(x267)*(x269)))+(((IkReal(-1.00000000000000))*(x267)*(x268)))+(((IkReal(-5.23847517560207))*(x272)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.00303911910620319))+(((IkReal(0.0215969237223081))*(x272)))+(((IkReal(0.000212081790953065))*(sj2)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x271)))+(((x269)*(x270)))+(((IkReal(0.0112664671982164))*(cj2)))+(((x268)*(x270)))), ((IkReal(-0.737158226710723))+(((IkReal(-0.0514418262244123))*(sj2)))+(((IkReal(-2.73275534485633))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(5.23847517560207))*(x271)))+(((IkReal(-1.00000000000000))*(x267)*(x269)))+(((IkReal(-1.00000000000000))*(x267)*(x268)))+(((IkReal(-5.23847517560207))*(x272)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x273=IKcos(j4);
IkReal x274=IKsin(j4);
evalcond[0]=((((IkReal(0.000787000000000000))*(x273)))+(pz)+(((IkReal(0.190892000000000))*(x274))));
evalcond[1]=((IkReal(0.140720000000000))+(((cj1)*(cj2)*(px)))+(((cj1)*(py)*(sj2)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.190892000000000))*(x273)))+(((IkReal(-0.000787000000000000))*(x274)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x275=((cj1)*(cj2));
IkReal x276=((IkReal(1.00000000000000))*(sj1));
IkReal x277=((py)*(sj2));
IkReal x278=((cj2)*(sj1));
IkReal x279=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x276)))+(((r01)*(x278)))+(((r00)*(x275))));
evalcond[3]=((IkReal(0.331612000000000))+(((px)*(x275)))+(((cj1)*(x277)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x278)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x276)*(x279))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x279)))+(((py)*(x275)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x276)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x276)*(x277))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x280=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x280)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x280)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x281=((cj1)*(cj2));
IkReal x282=((IkReal(1.00000000000000))*(sj1));
IkReal x283=((py)*(sj2));
IkReal x284=((cj2)*(sj1));
IkReal x285=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((r01)*(x284)))+(((r00)*(x281)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x282))));
evalcond[3]=((IkReal(-0.0501720000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x282)*(x285)))+(((cj1)*(x283)))+(((py)*(x284)))+(((px)*(x281)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x282)))+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((IkReal(-0.521670000000000))*(sj2)))+(((py)*(x281)))+(((IkReal(-1.00000000000000))*(cj1)*(x285))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x286=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x286)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x286)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x287=((IkReal(1.00000000000000))*(sj1));
IkReal x288=((cj2)*(px));
IkReal x289=((cj1)*(py));
IkReal x290=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.139933000000000))+(((sj2)*(x289)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x287)*(x290)))+(((cj1)*(x288)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x287)*(x288)))+(((IkReal(-1.00000000000000))*(cj1)*(x290)))+(((cj2)*(x289)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x287)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x291=((r01)*(sj2));
IkReal x292=((IkReal(1.00000000000000))*(cj1));
IkReal x293=((r00)*(sj2));
IkReal x294=((cj2)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(r01)*(x294)))+(((sj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x292))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x292)))+(((sj1)*(x291)))+(((r00)*(x294))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(r01)*(x294)))+(((sj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x292)))))+IKsqr(((((cj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x292)))+(((sj1)*(x291)))+(((r00)*(x294)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x291)*(x292)))+(((IkReal(-1.00000000000000))*(r01)*(x294)))+(((sj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x292)))), ((((cj1)*(x293)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x292)))+(((sj1)*(x291)))+(((r00)*(x294)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x295=((cj1)*(r00));
IkReal x296=((cj2)*(r01));
IkReal x297=((IkReal(1.00000000000000))*(sj2));
IkReal x298=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x295)))+(((sj1)*(x296)))+(((IkReal(-1.00000000000000))*(x297)*(x298)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x297)))+(((cj1)*(x296)))+(((IkReal(-1.00000000000000))*(cj2)*(x298)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(x295)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x299=((IkReal(1.00000000000000))*(sj1));
IkReal x300=((cj2)*(px));
IkReal x301=((cj1)*(py));
IkReal x302=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.141507000000000))+(((cj1)*(x300)))+(((sj2)*(x301)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x299)*(x302)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x299)))+(((cj2)*(x301)))+(((IkReal(-1.00000000000000))*(x299)*(x300)))+(((IkReal(-1.00000000000000))*(cj1)*(x302)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x303=((cj1)*(cj2));
IkReal x304=((r01)*(sj1));
IkReal x305=((cj1)*(sj2));
IkReal x306=((r00)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x306)))+(((cj2)*(x304)))+(((r01)*(x305)))+(((r00)*(x303))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((sj2)*(x304)))+(((cj2)*(x306)))+(((IkReal(-1.00000000000000))*(r01)*(x303)))+(((r00)*(x305))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x306)))+(((cj2)*(x304)))+(((r01)*(x305)))+(((r00)*(x303)))))+IKsqr(((((sj2)*(x304)))+(((cj2)*(x306)))+(((IkReal(-1.00000000000000))*(r01)*(x303)))+(((r00)*(x305)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj2)*(x306)))+(((cj2)*(x304)))+(((r01)*(x305)))+(((r00)*(x303)))), ((((sj2)*(x304)))+(((cj2)*(x306)))+(((IkReal(-1.00000000000000))*(r01)*(x303)))+(((r00)*(x305)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x307=((cj1)*(r00));
IkReal x308=((cj2)*(r01));
IkReal x309=((IkReal(1.00000000000000))*(sj2));
IkReal x310=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x307)))+(((IkReal(-1.00000000000000))*(x309)*(x310)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((sj1)*(x308))));
evalcond[1]=((((cj1)*(x308)))+(((IkReal(-1.00000000000000))*(cj2)*(x310)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(x307)*(x309)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x309))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x311=((r01)*(sj2));
IkReal x312=((IkReal(1.00000000000000))*(cj1));
IkReal x313=((r00)*(sj2));
IkReal x314=((cj2)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x312)))+(((sj1)*(x313)))+(((IkReal(-1.00000000000000))*(r01)*(x314)))+(((IkReal(-1.00000000000000))*(x311)*(x312))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(x313)))+(((sj1)*(x311)))+(((r00)*(x314)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x312))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x312)))+(((sj1)*(x313)))+(((IkReal(-1.00000000000000))*(r01)*(x314)))+(((IkReal(-1.00000000000000))*(x311)*(x312)))))))+IKsqr(((((cj1)*(x313)))+(((sj1)*(x311)))+(((r00)*(x314)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x312)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x312)))+(((sj1)*(x313)))+(((IkReal(-1.00000000000000))*(r01)*(x314)))+(((IkReal(-1.00000000000000))*(x311)*(x312)))))), ((((cj1)*(x313)))+(((sj1)*(x311)))+(((r00)*(x314)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x312)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x315=IKsin(j5);
IkReal x316=((cj1)*(r00));
IkReal x317=((cj2)*(r01));
IkReal x318=((IkReal(1.00000000000000))*(sj2));
IkReal x319=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x315))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x318)*(x319)))+(((sj4)*(x315)))+(((sj1)*(x317)))+(((cj2)*(x316))));
evalcond[2]=((((cj1)*(x317)))+(((IkReal(-1.00000000000000))*(cj2)*(x319)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x318)))+(((IkReal(-1.00000000000000))*(x316)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x320=IKsin(j5);
IkReal x321=((cj1)*(r00));
IkReal x322=((cj2)*(r01));
IkReal x323=((IkReal(1.00000000000000))*(sj2));
IkReal x324=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x320))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x321)))+(((sj4)*(x320)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((sj1)*(x322))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x324)))+(((cj1)*(x322)))+(((IkReal(-1.00000000000000))*(x321)*(x323)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x323)))+(IKcos(j5)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x325=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj1)*(cj2)*(py)))+(((IkReal(-1.00000000000000))*(cj1)*(px)*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x325)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x325)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x326=((IkReal(5.23847517560207))*(px));
IkReal x327=((cj1)*(cj2));
IkReal x328=((sj1)*(sj2));
IkReal x329=((IkReal(0.0215969237223081))*(px));
IkReal x330=((cj2)*(py)*(sj1));
IkReal x331=((cj1)*(py)*(sj2));
if( IKabs(((IkReal(0.00271516525036857))+(((x328)*(x329)))+(((IkReal(-0.000212081790953065))*(sj2)))+(((IkReal(-0.0112664671982164))*(cj2)))+(((IkReal(-1.00000000000000))*(x327)*(x329)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x330)))+(((IkReal(-0.0215969237223081))*(x331))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.658581099076692))+(((x326)*(x327)))+(((IkReal(-1.00000000000000))*(x326)*(x328)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(0.0514418262244123))*(sj2)))+(((IkReal(2.73275534485633))*(cj2)))+(((IkReal(5.23847517560207))*(x330)))+(((IkReal(5.23847517560207))*(x331))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00271516525036857))+(((x328)*(x329)))+(((IkReal(-0.000212081790953065))*(sj2)))+(((IkReal(-0.0112664671982164))*(cj2)))+(((IkReal(-1.00000000000000))*(x327)*(x329)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x330)))+(((IkReal(-0.0215969237223081))*(x331)))))+IKsqr(((IkReal(-0.658581099076692))+(((x326)*(x327)))+(((IkReal(-1.00000000000000))*(x326)*(x328)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(0.0514418262244123))*(sj2)))+(((IkReal(2.73275534485633))*(cj2)))+(((IkReal(5.23847517560207))*(x330)))+(((IkReal(5.23847517560207))*(x331)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.00271516525036857))+(((x328)*(x329)))+(((IkReal(-0.000212081790953065))*(sj2)))+(((IkReal(-0.0112664671982164))*(cj2)))+(((IkReal(-1.00000000000000))*(x327)*(x329)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(-0.0215969237223081))*(x330)))+(((IkReal(-0.0215969237223081))*(x331)))), ((IkReal(-0.658581099076692))+(((x326)*(x327)))+(((IkReal(-1.00000000000000))*(x326)*(x328)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(0.0514418262244123))*(sj2)))+(((IkReal(2.73275534485633))*(cj2)))+(((IkReal(5.23847517560207))*(x330)))+(((IkReal(5.23847517560207))*(x331)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x332=IKsin(j4);
IkReal x333=IKcos(j4);
evalcond[0]=((((IkReal(0.000787000000000000))*(x333)))+(((IkReal(0.190892000000000))*(x332)))+(pz));
evalcond[1]=((IkReal(-0.125720000000000))+(((IkReal(0.000787000000000000))*(x332)))+(((cj1)*(cj2)*(px)))+(((IkReal(-0.190892000000000))*(x333)))+(((cj1)*(py)*(sj2)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x334=((cj1)*(cj2));
IkReal x335=((IkReal(1.00000000000000))*(sj1));
IkReal x336=((py)*(sj2));
IkReal x337=((cj2)*(sj1));
IkReal x338=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((r01)*(x337)))+(((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x335)))+(((r00)*(x334))));
evalcond[3]=((IkReal(-0.316612000000000))+(((px)*(x334)))+(((cj1)*(x336)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x337)))+(((IkReal(-1.00000000000000))*(x335)*(x338)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x335)))+(((IkReal(-1.00000000000000))*(cj1)*(x338)))+(((py)*(x334)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x335)*(x336))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x339=((IkReal(1.00000000000000))*(r00));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x339)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x339))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x339)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x339)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x339)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x339)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x340=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x340)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x340))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x341=((cj1)*(cj2));
IkReal x342=((IkReal(1.00000000000000))*(sj1));
IkReal x343=((py)*(sj2));
IkReal x344=((cj2)*(sj1));
IkReal x345=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x342)))+(((r01)*(x344)))+(((r00)*(x341))));
evalcond[3]=((IkReal(0.0651720000000000))+(((py)*(x344)))+(((cj1)*(x343)))+(((IkReal(0.521670000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x342)*(x345)))+(((IkReal(0.00982000000000000))*(sj2)))+(((px)*(x341))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x345)))+(((IkReal(0.00982000000000000))*(cj2)))+(((py)*(x341)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x342)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x342)*(x343))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x346=((IkReal(1.00000000000000))*(r00));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x346)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x346))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x346)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x346)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x346)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x346)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x347=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x347)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x347))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x348=((IkReal(1.00000000000000))*(sj1));
IkReal x349=((cj2)*(px));
IkReal x350=((cj1)*(py));
IkReal x351=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.124933000000000))+(((IkReal(-1.00000000000000))*(x348)*(x351)))+(((cj1)*(x349)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x350)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x351)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x348)))+(((IkReal(-1.00000000000000))*(x348)*(x349)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x350))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x352=((cj1)*(r00));
IkReal x353=((cj2)*(r01));
IkReal x354=((IkReal(1.00000000000000))*(sj2));
IkReal x355=((r00)*(sj1));
if( IKabs(((((cj1)*(r01)*(sj2)))+(((sj1)*(x353)))+(((IkReal(-1.00000000000000))*(x354)*(x355)))+(((cj2)*(x352))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(x355)))+(((cj1)*(x353)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x354)))+(((IkReal(-1.00000000000000))*(x352)*(x354))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)*(sj2)))+(((sj1)*(x353)))+(((IkReal(-1.00000000000000))*(x354)*(x355)))+(((cj2)*(x352)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(x355)))+(((cj1)*(x353)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x354)))+(((IkReal(-1.00000000000000))*(x352)*(x354)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)*(sj2)))+(((sj1)*(x353)))+(((IkReal(-1.00000000000000))*(x354)*(x355)))+(((cj2)*(x352)))), ((((IkReal(-1.00000000000000))*(cj2)*(x355)))+(((cj1)*(x353)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x354)))+(((IkReal(-1.00000000000000))*(x352)*(x354)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x356=((cj1)*(r00));
IkReal x357=((cj2)*(r01));
IkReal x358=((IkReal(1.00000000000000))*(sj2));
IkReal x359=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x358)*(x359)))+(((sj1)*(x357)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj2)*(x356))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x359)))+(((cj1)*(x357)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x358)))+(((IkReal(-1.00000000000000))*(x356)*(x358)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x360=((IkReal(1.00000000000000))*(sj1));
IkReal x361=((cj2)*(px));
IkReal x362=((cj1)*(py));
IkReal x363=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.126507000000000))+(((IkReal(-1.00000000000000))*(x360)*(x363)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x361)))+(((sj2)*(x362)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x360)*(x361)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x360)))+(((IkReal(-1.00000000000000))*(cj1)*(x363)))+(((cj2)*(x362)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x364=((r00)*(sj1));
IkReal x365=((IkReal(1.00000000000000))*(cj2));
IkReal x366=((r01)*(sj1));
IkReal x367=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x367)))+(((sj2)*(x364)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x365)))+(((IkReal(-1.00000000000000))*(x365)*(x366))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((IkReal(-1.00000000000000))*(sj2)*(x366)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x367)))+(((sj2)*(x364)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x365)))+(((IkReal(-1.00000000000000))*(x365)*(x366)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((IkReal(-1.00000000000000))*(sj2)*(x366)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x367)))+(((sj2)*(x364)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x365)))+(((IkReal(-1.00000000000000))*(x365)*(x366)))), ((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((IkReal(-1.00000000000000))*(sj2)*(x366)))+(((IkReal(-1.00000000000000))*(x364)*(x365)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x368=((cj1)*(r00));
IkReal x369=((cj2)*(r01));
IkReal x370=((IkReal(1.00000000000000))*(sj2));
IkReal x371=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((sj1)*(x369)))+(IKsin(j5))+(((cj2)*(x368))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x368)*(x370)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(cj2)*(x371)))+(((cj1)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x370))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x372=((cj1)*(r00));
IkReal x373=((cj2)*(r01));
IkReal x374=((IkReal(1.00000000000000))*(sj2));
IkReal x375=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((sj1)*(x373)))+(((IkReal(-1.00000000000000))*(x374)*(x375)))+(((cj2)*(x372))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x372)*(x374)))+(((IkReal(-1.00000000000000))*(cj2)*(x375)))+(((cj1)*(x373)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x374))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((sj1)*(x373)))+(((IkReal(-1.00000000000000))*(x374)*(x375)))+(((cj2)*(x372)))))))+IKsqr(((((IkReal(-1.00000000000000))*(x372)*(x374)))+(((IkReal(-1.00000000000000))*(cj2)*(x375)))+(((cj1)*(x373)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x374)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((sj1)*(x373)))+(((IkReal(-1.00000000000000))*(x374)*(x375)))+(((cj2)*(x372)))))), ((((IkReal(-1.00000000000000))*(x372)*(x374)))+(((IkReal(-1.00000000000000))*(cj2)*(x375)))+(((cj1)*(x373)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x374)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x376=IKsin(j5);
IkReal x377=((cj1)*(r00));
IkReal x378=((cj2)*(r01));
IkReal x379=((IkReal(1.00000000000000))*(sj2));
IkReal x380=((r00)*(sj1));
IkReal x381=((IkReal(1.00000000000000))*(x376));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x381))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x378)))+(((IkReal(-1.00000000000000))*(x379)*(x380)))+(((IkReal(-1.00000000000000))*(sj4)*(x381)))+(((cj2)*(x377))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x377)*(x379)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj1)*(x378)))+(((IkReal(-1.00000000000000))*(cj2)*(x380)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x379))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x382=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x382)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x382))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x382)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x382)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x382)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x382)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x383=IKsin(j5);
IkReal x384=((cj1)*(r00));
IkReal x385=((cj2)*(r01));
IkReal x386=((IkReal(1.00000000000000))*(sj2));
IkReal x387=((r00)*(sj1));
IkReal x388=((IkReal(1.00000000000000))*(x383));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x388))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x384)))+(((IkReal(-1.00000000000000))*(sj4)*(x388)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(((sj1)*(x385))));
evalcond[2]=((((cj1)*(x385)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x384)*(x386)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x386)))+(((IkReal(-1.00000000000000))*(cj2)*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0588310000000000))+(((cj1)*(cj2)*(px)))+(((cj1)*(py)*(sj2)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x389=((IkReal(0.0215969237223081))*(py));
IkReal x390=((cj1)*(cj2));
IkReal x391=((sj1)*(sj2));
IkReal x392=((IkReal(5.23847517560207))*(py));
IkReal x393=((IkReal(0.0215969237223081))*(px));
IkReal x394=((cj2)*(sj1));
IkReal x395=((cj1)*(sj2));
IkReal x396=((IkReal(5.23847517560207))*(px));
if( IKabs(((IkReal(0.00851588299294329))+(((IkReal(-1.00000000000000))*(x389)*(x390)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.0112664671982164))*(sj2)))+(((IkReal(-0.000212081790953065))*(cj2)))+(((x389)*(x391)))+(((x393)*(x394)))+(((x393)*(x395))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.06558314649165))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-2.73275534485633))*(sj2)))+(((IkReal(0.0514418262244123))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x395)*(x396)))+(((IkReal(-1.00000000000000))*(x391)*(x392)))+(((x390)*(x392))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.00851588299294329))+(((IkReal(-1.00000000000000))*(x389)*(x390)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.0112664671982164))*(sj2)))+(((IkReal(-0.000212081790953065))*(cj2)))+(((x389)*(x391)))+(((x393)*(x394)))+(((x393)*(x395)))))+IKsqr(((IkReal(-2.06558314649165))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-2.73275534485633))*(sj2)))+(((IkReal(0.0514418262244123))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x395)*(x396)))+(((IkReal(-1.00000000000000))*(x391)*(x392)))+(((x390)*(x392)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.00851588299294329))+(((IkReal(-1.00000000000000))*(x389)*(x390)))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.0112664671982164))*(sj2)))+(((IkReal(-0.000212081790953065))*(cj2)))+(((x389)*(x391)))+(((x393)*(x394)))+(((x393)*(x395)))), ((IkReal(-2.06558314649165))+(((IkReal(-1.00000000000000))*(x394)*(x396)))+(((IkReal(-2.73275534485633))*(sj2)))+(((IkReal(0.0514418262244123))*(cj2)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x395)*(x396)))+(((IkReal(-1.00000000000000))*(x391)*(x392)))+(((x390)*(x392)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x397=IKsin(j4);
IkReal x398=IKcos(j4);
IkReal x399=((IkReal(1.00000000000000))*(px));
evalcond[0]=((((IkReal(0.190892000000000))*(x397)))+(pz)+(((IkReal(0.000787000000000000))*(x398))));
evalcond[1]=((IkReal(-0.394310000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj1)*(cj2)*(py)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x399)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x399)))+(((IkReal(0.000787000000000000))*(x397)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-0.190892000000000))*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x400=((cj2)*(px));
IkReal x401=((IkReal(1.00000000000000))*(sj1));
IkReal x402=((cj1)*(py));
IkReal x403=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x401)))+(((IkReal(-1.00000000000000))*(r00)*(x403)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x401))));
evalcond[3]=((IkReal(0.0588310000000000))+(((sj2)*(x402)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x401)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x400)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.585202000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x403)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x401)))+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x402))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x404=((IkReal(1.00000000000000))*(cj2));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x404)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x404)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x404)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x405=((cj2)*(px));
IkReal x406=((IkReal(1.00000000000000))*(sj1));
IkReal x407=((cj1)*(py));
IkReal x408=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x406)))+(((IkReal(-1.00000000000000))*(r00)*(x408)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x406))));
evalcond[3]=((IkReal(0.0588310000000000))+(((sj2)*(x407)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x406)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x405)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.203418000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x408)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x406)))+(((IkReal(-1.00000000000000))*(x405)*(x406)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x407))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x409=((IkReal(1.00000000000000))*(r01));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x409)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x409))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x409)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x409)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x409)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x409)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x410=((IkReal(1.00000000000000))*(sj1));
IkReal x411=((cj2)*(px));
IkReal x412=((cj1)*(py));
IkReal x413=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((sj2)*(x412)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x410)*(x413)))+(((cj1)*(x411)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.393523000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x410)))+(((IkReal(-1.00000000000000))*(cj1)*(x413)))+(((IkReal(-1.00000000000000))*(x410)*(x411)))+(((cj2)*(x412)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x414=((r00)*(sj1));
IkReal x415=((IkReal(1.00000000000000))*(cj2));
IkReal x416=((r01)*(sj1));
IkReal x417=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x417)))+(((IkReal(-1.00000000000000))*(sj2)*(x416)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((sj2)*(x414)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x415)))+(((IkReal(-1.00000000000000))*(x415)*(x416)))+(((IkReal(-1.00000000000000))*(r01)*(x417))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x417)))+(((IkReal(-1.00000000000000))*(sj2)*(x416)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((cj1)*(cj2)*(r01)))))+IKsqr(((((sj2)*(x414)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x415)))+(((IkReal(-1.00000000000000))*(x415)*(x416)))+(((IkReal(-1.00000000000000))*(r01)*(x417)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x417)))+(((IkReal(-1.00000000000000))*(sj2)*(x416)))+(((IkReal(-1.00000000000000))*(x414)*(x415)))+(((cj1)*(cj2)*(r01)))), ((((sj2)*(x414)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x415)))+(((IkReal(-1.00000000000000))*(x415)*(x416)))+(((IkReal(-1.00000000000000))*(r01)*(x417)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x418=((cj1)*(r00));
IkReal x419=((cj2)*(r01));
IkReal x420=((IkReal(1.00000000000000))*(sj2));
IkReal x421=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x420)*(x421)))+(((sj1)*(x419)))+(IKcos(j5))+(((cj2)*(x418))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x420)))+(((IkReal(-1.00000000000000))*(x418)*(x420)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(x419)))+(((IkReal(-1.00000000000000))*(cj2)*(x421))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x422=((IkReal(1.00000000000000))*(sj1));
IkReal x423=((cj2)*(px));
IkReal x424=((cj1)*(py));
IkReal x425=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((IkReal(-1.00000000000000))*(x422)*(x425)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x424)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x423))));
evalcond[4]=((IkReal(-0.395097000000000))+(((IkReal(-1.00000000000000))*(x422)*(x423)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x422)))+(((cj2)*(x424)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x425))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x426=((r01)*(sj2));
IkReal x427=((IkReal(1.00000000000000))*(cj1));
IkReal x428=((r00)*(sj2));
IkReal x429=((cj2)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x427)))+(((r00)*(x429)))+(((sj1)*(x426)))+(((cj1)*(x428))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((sj1)*(x428)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x427))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x427)))+(((r00)*(x429)))+(((sj1)*(x426)))+(((cj1)*(x428)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((sj1)*(x428)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x427)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x427)))+(((r00)*(x429)))+(((sj1)*(x426)))+(((cj1)*(x428)))), ((((IkReal(-1.00000000000000))*(r01)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((sj1)*(x428)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x427)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x430=((cj1)*(r00));
IkReal x431=((cj2)*(r01));
IkReal x432=((IkReal(1.00000000000000))*(sj2));
IkReal x433=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x432)*(x433)))+(IKcos(j5))+(((cj2)*(x430)))+(((sj1)*(x431))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x430)*(x432)))+(((cj1)*(x431)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x432)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(cj2)*(x433))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x434=((r00)*(sj1));
IkReal x435=((IkReal(1.00000000000000))*(cj2));
IkReal x436=((r01)*(sj1));
IkReal x437=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x434)*(x435)))+(((IkReal(-1.00000000000000))*(sj2)*(x436)))+(((IkReal(-1.00000000000000))*(r00)*(x437)))+(((cj1)*(cj2)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x435)))+(((sj2)*(x434)))+(((IkReal(-1.00000000000000))*(r01)*(x437))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x434)*(x435)))+(((IkReal(-1.00000000000000))*(sj2)*(x436)))+(((IkReal(-1.00000000000000))*(r00)*(x437)))+(((cj1)*(cj2)*(r01)))))))+IKsqr(((((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x435)))+(((sj2)*(x434)))+(((IkReal(-1.00000000000000))*(r01)*(x437)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x434)*(x435)))+(((IkReal(-1.00000000000000))*(sj2)*(x436)))+(((IkReal(-1.00000000000000))*(r00)*(x437)))+(((cj1)*(cj2)*(r01)))))), ((((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x435)))+(((sj2)*(x434)))+(((IkReal(-1.00000000000000))*(r01)*(x437)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x438=IKsin(j5);
IkReal x439=((cj1)*(r00));
IkReal x440=((cj2)*(r01));
IkReal x441=((IkReal(1.00000000000000))*(sj2));
IkReal x442=((r00)*(sj1));
IkReal x443=((IkReal(1.00000000000000))*(x438));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x443)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x440)))+(IKcos(j5))+(((cj2)*(x439)))+(((IkReal(-1.00000000000000))*(x441)*(x442))));
evalcond[2]=((((cj1)*(x440)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x441)))+(((IkReal(-1.00000000000000))*(x439)*(x441)))+(((IkReal(-1.00000000000000))*(sj4)*(x443)))+(((IkReal(-1.00000000000000))*(cj2)*(x442))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x444=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x444)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x444)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x444)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x444)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x444)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x444)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x445=IKsin(j5);
IkReal x446=((cj1)*(r00));
IkReal x447=((cj2)*(r01));
IkReal x448=((IkReal(1.00000000000000))*(sj2));
IkReal x449=((r00)*(sj1));
IkReal x450=((IkReal(1.00000000000000))*(x445));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x450)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x447)))+(IKcos(j5))+(((cj2)*(x446)))+(((IkReal(-1.00000000000000))*(x448)*(x449))));
evalcond[2]=((((cj1)*(x447)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x448)))+(((IkReal(-1.00000000000000))*(sj4)*(x450)))+(((IkReal(-1.00000000000000))*(cj2)*(x449)))+(((IkReal(-1.00000000000000))*(x446)*(x448))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0438310000000000))+(((cj1)*(cj2)*(px)))+(((cj1)*(py)*(sj2)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x451=((IkReal(0.0215969237223081))*(py));
IkReal x452=((cj1)*(cj2));
IkReal x453=((sj1)*(sj2));
IkReal x454=((IkReal(5.23847517560207))*(py));
IkReal x455=((IkReal(0.0215969237223081))*(px));
IkReal x456=((cj2)*(sj1));
IkReal x457=((cj1)*(sj2));
IkReal x458=((IkReal(5.23847517560207))*(px));
if( IKabs(((IkReal(-0.00276159863637153))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.000212081790953065))*(cj2)))+(((IkReal(-1.00000000000000))*(x455)*(x456)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(-1.00000000000000))*(x451)*(x453)))+(((IkReal(-0.0112664671982164))*(sj2)))+(((x451)*(x452))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.669843820704237))+(((IkReal(-0.0514418262244123))*(cj2)))+(((x453)*(x454)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x452)*(x454)))+(((IkReal(2.73275534485633))*(sj2)))+(((x456)*(x458)))+(((x457)*(x458))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-0.00276159863637153))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.000212081790953065))*(cj2)))+(((IkReal(-1.00000000000000))*(x455)*(x456)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(-1.00000000000000))*(x451)*(x453)))+(((IkReal(-0.0112664671982164))*(sj2)))+(((x451)*(x452)))))+IKsqr(((IkReal(0.669843820704237))+(((IkReal(-0.0514418262244123))*(cj2)))+(((x453)*(x454)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x452)*(x454)))+(((IkReal(2.73275534485633))*(sj2)))+(((x456)*(x458)))+(((x457)*(x458)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(-0.00276159863637153))+(((IkReal(-5.23847517560207))*(pz)))+(((IkReal(0.000212081790953065))*(cj2)))+(((IkReal(-1.00000000000000))*(x455)*(x456)))+(((IkReal(-1.00000000000000))*(x455)*(x457)))+(((IkReal(-1.00000000000000))*(x451)*(x453)))+(((IkReal(-0.0112664671982164))*(sj2)))+(((x451)*(x452)))), ((IkReal(0.669843820704237))+(((IkReal(-0.0514418262244123))*(cj2)))+(((x453)*(x454)))+(((IkReal(-0.0215969237223081))*(pz)))+(((IkReal(-1.00000000000000))*(x452)*(x454)))+(((IkReal(2.73275534485633))*(sj2)))+(((x456)*(x458)))+(((x457)*(x458)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x459=IKcos(j4);
IkReal x460=IKsin(j4);
IkReal x461=((IkReal(1.00000000000000))*(px));
evalcond[0]=((pz)+(((IkReal(0.000787000000000000))*(x459)))+(((IkReal(0.190892000000000))*(x460))));
evalcond[1]=((IkReal(-0.127870000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj1)*(cj2)*(py)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x461)))+(((IkReal(-1.00000000000000))*(py)*(sj1)*(sj2)))+(((IkReal(-0.000787000000000000))*(x460)))+(((IkReal(0.190892000000000))*(x459)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x461)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x462=((cj2)*(px));
IkReal x463=((IkReal(1.00000000000000))*(sj1));
IkReal x464=((cj1)*(py));
IkReal x465=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x465)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x463)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x463)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x462)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x463)))+(((sj2)*(x464))));
evalcond[4]=((IkReal(0.0630220000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x462)*(x463)))+(((cj2)*(x464)))+(((IkReal(-1.00000000000000))*(px)*(x465)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x463))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x466=((cj2)*(px));
IkReal x467=((IkReal(1.00000000000000))*(sj1));
IkReal x468=((cj1)*(py));
IkReal x469=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x469)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x467)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x467)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x466)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x467)))+(((sj2)*(x468))));
evalcond[4]=((IkReal(-0.318762000000000))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj2)*(x468)))+(((IkReal(-1.00000000000000))*(px)*(x469)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x467))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x470=((IkReal(1.00000000000000))*(sj1));
IkReal x471=((cj2)*(px));
IkReal x472=((cj1)*(py));
IkReal x473=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x471)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x470)*(x473)))+(((IkReal(0.00982000000000000))*(sj2)))+(((sj2)*(x472))));
evalcond[4]=((IkReal(-0.128657000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x473)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x470)))+(((cj2)*(x472)))+(((IkReal(-1.00000000000000))*(x470)*(x471)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x474=((cj1)*(cj2));
IkReal x475=((r01)*(sj1));
IkReal x476=((cj1)*(sj2));
IkReal x477=((r00)*(sj1));
if( IKabs(((((cj2)*(x477)))+(((IkReal(-1.00000000000000))*(r01)*(x474)))+(((sj2)*(x475)))+(((r00)*(x476))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x477)))+(((cj2)*(x475)))+(((r00)*(x474)))+(((r01)*(x476))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(x477)))+(((IkReal(-1.00000000000000))*(r01)*(x474)))+(((sj2)*(x475)))+(((r00)*(x476)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x477)))+(((cj2)*(x475)))+(((r00)*(x474)))+(((r01)*(x476)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(x477)))+(((IkReal(-1.00000000000000))*(r01)*(x474)))+(((sj2)*(x475)))+(((r00)*(x476)))), ((((IkReal(-1.00000000000000))*(sj2)*(x477)))+(((cj2)*(x475)))+(((r00)*(x474)))+(((r01)*(x476)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x478=((cj1)*(cj2));
IkReal x479=((cj2)*(sj1));
IkReal x480=((IkReal(1.00000000000000))*(r00));
IkReal x481=((cj1)*(sj2));
IkReal x482=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x480)*(x482)))+(((r01)*(x481)))+(((r00)*(x478)))+(((r01)*(x479))));
evalcond[1]=((IKsin(j5))+(((IkReal(-1.00000000000000))*(r01)*(x482)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((r01)*(x478))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x483=((IkReal(1.00000000000000))*(sj1));
IkReal x484=((cj2)*(px));
IkReal x485=((cj1)*(py));
IkReal x486=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((IkReal(-1.00000000000000))*(x483)*(x486)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x484)))+(((sj2)*(x485)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.127083000000000))+(((cj2)*(x485)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x486)))+(((IkReal(-1.00000000000000))*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x483)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x487=((cj1)*(r00));
IkReal x488=((cj2)*(r01));
IkReal x489=((IkReal(1.00000000000000))*(sj2));
IkReal x490=((r00)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(x487)*(x489)))+(((cj1)*(x488)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x489)))+(((IkReal(-1.00000000000000))*(cj2)*(x490))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(x487)))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((sj1)*(x488))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x487)*(x489)))+(((cj1)*(x488)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x489)))+(((IkReal(-1.00000000000000))*(cj2)*(x490)))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(x487)))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((sj1)*(x488)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x487)*(x489)))+(((cj1)*(x488)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x489)))+(((IkReal(-1.00000000000000))*(cj2)*(x490)))), ((((cj1)*(r01)*(sj2)))+(((cj2)*(x487)))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((sj1)*(x488)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x491=((cj1)*(cj2));
IkReal x492=((cj2)*(sj1));
IkReal x493=((IkReal(1.00000000000000))*(r00));
IkReal x494=((cj1)*(sj2));
IkReal x495=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r00)*(x491)))+(((r01)*(x494)))+(((r01)*(x492))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x495)))+(((IkReal(-1.00000000000000))*(x493)*(x494)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((r01)*(x491)))+(((IkReal(-1.00000000000000))*(x492)*(x493))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x496=((cj1)*(cj2));
IkReal x497=((r01)*(sj1));
IkReal x498=((cj1)*(sj2));
IkReal x499=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x496)))+(((sj2)*(x497)))+(((r00)*(x498)))+(((cj2)*(x499))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x499)))+(((r00)*(x496)))+(((r01)*(x498)))+(((cj2)*(x497))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x496)))+(((sj2)*(x497)))+(((r00)*(x498)))+(((cj2)*(x499)))))))+IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x499)))+(((r00)*(x496)))+(((r01)*(x498)))+(((cj2)*(x497)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x496)))+(((sj2)*(x497)))+(((r00)*(x498)))+(((cj2)*(x499)))))), ((((IkReal(-1.00000000000000))*(sj2)*(x499)))+(((r00)*(x496)))+(((r01)*(x498)))+(((cj2)*(x497)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x500=IKsin(j5);
IkReal x501=((cj1)*(cj2));
IkReal x502=((cj2)*(sj1));
IkReal x503=((IkReal(1.00000000000000))*(r00));
IkReal x504=((cj1)*(sj2));
IkReal x505=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x500)))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x503)*(x505)))+(((r01)*(x502)))+(((r01)*(x504)))+(((r00)*(x501))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x502)*(x503)))+(((IkReal(-1.00000000000000))*(x503)*(x504)))+(((r01)*(x501)))+(((IkReal(-1.00000000000000))*(r01)*(x505)))+(((sj4)*(x500))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x506=IKsin(j5);
IkReal x507=((cj1)*(cj2));
IkReal x508=((cj2)*(sj1));
IkReal x509=((IkReal(1.00000000000000))*(r00));
IkReal x510=((cj1)*(sj2));
IkReal x511=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x506)))+(r02));
evalcond[1]=((((r01)*(x510)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r01)*(x508)))+(((r00)*(x507)))+(((IkReal(-1.00000000000000))*(x509)*(x511))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x511)))+(((IkReal(-1.00000000000000))*(x508)*(x509)))+(((r01)*(x507)))+(((sj4)*(x506)))+(((IkReal(-1.00000000000000))*(x509)*(x510))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x512=((IkReal(190892000000.000))*(cj2));
IkReal x513=((cj1)*(py));
IkReal x514=((cj3)*(pz));
IkReal x515=((px)*(sj1));
IkReal x516=((IkReal(190892000000.000))*(sj2));
IkReal x517=((cj1)*(px));
IkReal x518=((IkReal(787000000.000000))*(cj2));
IkReal x519=((py)*(sj1));
IkReal x520=((IkReal(787000000.000000))*(sj2));
if( IKabs(((gconst1)*(((IkReal(205477830.000000))+(((IkReal(-7728340.00000000))*(cj2)))+(((x519)*(x520)))+(((IkReal(104844140.000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x513)*(x518)))+(((x517)*(x520)))+(((IkReal(410554290.000000))*(sj2)))+(((IkReal(-40397497.0000000))*(sj3)))+(((x515)*(x518)))+(((IkReal(-190892000000.000))*(x514))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-49839992280.0000))+(((IkReal(-99582629640.0000))*(sj2)))+(((IkReal(1874559440.00000))*(cj2)))+(((IkReal(-25430632240.0000))*(cj3)))+(((IkReal(9798677252.00000))*(sj3)))+(((IkReal(-787000000.000000))*(x514)))+(((IkReal(-1.00000000000000))*(x512)*(x515)))+(((x512)*(x513)))+(((IkReal(-1.00000000000000))*(x516)*(x517)))+(((IkReal(-1.00000000000000))*(x516)*(x519))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((IkReal(205477830.000000))+(((IkReal(-7728340.00000000))*(cj2)))+(((x519)*(x520)))+(((IkReal(104844140.000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x513)*(x518)))+(((x517)*(x520)))+(((IkReal(410554290.000000))*(sj2)))+(((IkReal(-40397497.0000000))*(sj3)))+(((x515)*(x518)))+(((IkReal(-190892000000.000))*(x514)))))), ((gconst1)*(((IkReal(-49839992280.0000))+(((IkReal(-99582629640.0000))*(sj2)))+(((IkReal(1874559440.00000))*(cj2)))+(((IkReal(-25430632240.0000))*(cj3)))+(((IkReal(9798677252.00000))*(sj3)))+(((IkReal(-787000000.000000))*(x514)))+(((IkReal(-1.00000000000000))*(x512)*(x515)))+(((x512)*(x513)))+(((IkReal(-1.00000000000000))*(x516)*(x517)))+(((IkReal(-1.00000000000000))*(x516)*(x519)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x521=IKcos(j4);
IkReal x522=IKsin(j4);
IkReal x523=((cj2)*(px));
IkReal x524=((IkReal(1.00000000000000))*(sj1));
IkReal x525=((cj2)*(py));
IkReal x526=((cj1)*(sj2));
IkReal x527=((IkReal(0.000787000000000000))*(x522));
IkReal x528=((IkReal(0.190892000000000))*(x521));
evalcond[0]=((((IkReal(0.190892000000000))*(x522)))+(((IkReal(0.000787000000000000))*(x521)))+(pz));
evalcond[1]=((IkReal(0.00750000000000000))+(((sj1)*(x525)))+(((IkReal(-1.00000000000000))*(sj3)*(x527)))+(((sj3)*(x528)))+(((IkReal(0.133220000000000))*(sj3)))+(((IkReal(0.521670000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x524)))+(((cj1)*(x523)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2)))+(((py)*(x526))));
evalcond[2]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x523)*(x524)))+(((IkReal(-1.00000000000000))*(cj3)*(x528)))+(((cj1)*(x525)))+(((IkReal(-0.133220000000000))*(cj3)))+(((IkReal(0.0513310000000000))*(sj3)))+(((cj3)*(x527)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x524)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(x526))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x529=(cj3)*(cj3);
IkReal x530=(sj3)*(sj3);
dummyeval[0]=((((sj4)*(x529)))+(((sj4)*(x530))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x530)))+(((IkReal(-1.00000000000000))*(x529))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x531=((cj2)*(px));
IkReal x532=((IkReal(1.00000000000000))*(sj1));
IkReal x533=((cj1)*(py));
IkReal x534=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.00750000000000000))+(((IkReal(-1.00000000000000))*(x532)*(x534)))+(((sj2)*(x533)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x531)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.132433000000000))*(sj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x531)*(x532)))+(((IkReal(-0.132433000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x534)))+(((IkReal(0.0513310000000000))*(sj3)))+(((cj2)*(x533)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x532))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((sj3)*(sj3))+((cj3)*(cj3))));
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x535=((cj3)*(sj1));
IkReal x536=((r00)*(sj2));
IkReal x537=((IkReal(1.00000000000000))*(r01));
IkReal x538=((cj1)*(cj3));
IkReal x539=((cj1)*(sj3));
IkReal x540=((sj1)*(sj3));
IkReal x541=((cj2)*(x540));
IkReal x542=((IkReal(1.00000000000000))*(cj2)*(r00));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x537)*(x541)))+(((IkReal(-1.00000000000000))*(x539)*(x542)))+(((IkReal(-1.00000000000000))*(sj2)*(x537)*(x539)))+(((x536)*(x540)))+(((cj2)*(r01)*(x538)))+(((IkReal(-1.00000000000000))*(x535)*(x542)))+(((IkReal(-1.00000000000000))*(sj2)*(x535)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x538))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj2)*(x535)*(x537)))+(((IkReal(-1.00000000000000))*(sj2)*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x538)*(x542)))+(((r01)*(sj2)*(x540)))+(((x536)*(x539)))+(((IkReal(-1.00000000000000))*(cj2)*(x537)*(x539)))+(((x535)*(x536)))+(((r00)*(x541))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(x537)*(x541)))+(((IkReal(-1.00000000000000))*(x539)*(x542)))+(((IkReal(-1.00000000000000))*(sj2)*(x537)*(x539)))+(((x536)*(x540)))+(((cj2)*(r01)*(x538)))+(((IkReal(-1.00000000000000))*(x535)*(x542)))+(((IkReal(-1.00000000000000))*(sj2)*(x535)*(x537)))+(((IkReal(-1.00000000000000))*(x536)*(x538)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(cj2)*(x535)*(x537)))+(((IkReal(-1.00000000000000))*(sj2)*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x538)*(x542)))+(((r01)*(sj2)*(x540)))+(((x536)*(x539)))+(((IkReal(-1.00000000000000))*(cj2)*(x537)*(x539)))+(((x535)*(x536)))+(((r00)*(x541)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x543=IKcos(j5);
IkReal x544=IKsin(j5);
IkReal x545=((cj1)*(r00));
IkReal x546=((cj2)*(r01));
IkReal x547=((IkReal(1.00000000000000))*(sj2));
IkReal x548=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x546)))+(((sj3)*(x544)))+(((IkReal(-1.00000000000000))*(x547)*(x548)))+(((cj3)*(x543)))+(((cj2)*(x545))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x545)*(x547)))+(((sj3)*(x543)))+(((IkReal(-1.00000000000000))*(cj3)*(x544)))+(((cj1)*(x546)))+(((IkReal(-1.00000000000000))*(cj2)*(x548)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x547))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x549=((cj2)*(px));
IkReal x550=((IkReal(1.00000000000000))*(sj1));
IkReal x551=((py)*(sj2));
IkReal x552=((px)*(sj2));
IkReal x553=((cj2)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.00750000000000000))+(((sj1)*(x553)))+(((IkReal(-1.00000000000000))*(x550)*(x552)))+(((IkReal(0.134007000000000))*(sj3)))+(((cj1)*(x551)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj1)*(x549)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-0.134007000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x550)*(x551)))+(((cj1)*(x553)))+(((IkReal(-1.00000000000000))*(x549)*(x550)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x552)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((sj3)*(sj3))+((cj3)*(cj3))));
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x554=((sj1)*(sj2));
IkReal x555=((cj3)*(r00));
IkReal x556=((r01)*(sj3));
IkReal x557=((cj1)*(sj2));
IkReal x558=((r00)*(sj3));
IkReal x559=((cj2)*(sj1));
IkReal x560=((cj1)*(cj2));
IkReal x561=((IkReal(1.00000000000000))*(cj3)*(r01));
if( IKabs(((gconst3)*(((((x558)*(x560)))+(((cj3)*(r01)*(x554)))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((x555)*(x557)))+(((x555)*(x559)))+(((IkReal(-1.00000000000000))*(x560)*(x561)))+(((x556)*(x559)))+(((x556)*(x557))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x555)*(x560)))+(((x557)*(x558)))+(((IkReal(-1.00000000000000))*(x556)*(x560)))+(((x554)*(x556)))+(((x554)*(x555)))+(((IkReal(-1.00000000000000))*(x557)*(x561)))+(((IkReal(-1.00000000000000))*(x559)*(x561)))+(((x558)*(x559))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((x558)*(x560)))+(((cj3)*(r01)*(x554)))+(((IkReal(-1.00000000000000))*(x554)*(x558)))+(((x555)*(x557)))+(((x555)*(x559)))+(((IkReal(-1.00000000000000))*(x560)*(x561)))+(((x556)*(x559)))+(((x556)*(x557)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x555)*(x560)))+(((x557)*(x558)))+(((IkReal(-1.00000000000000))*(x556)*(x560)))+(((x554)*(x556)))+(((x554)*(x555)))+(((IkReal(-1.00000000000000))*(x557)*(x561)))+(((IkReal(-1.00000000000000))*(x559)*(x561)))+(((x558)*(x559)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x562=IKsin(j5);
IkReal x563=IKcos(j5);
IkReal x564=((cj1)*(r00));
IkReal x565=((cj2)*(r01));
IkReal x566=((IkReal(1.00000000000000))*(sj2));
IkReal x567=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))+(((cj2)*(x564)))+(((cj3)*(x563)))+(((sj1)*(x565)))+(((IkReal(-1.00000000000000))*(sj3)*(x562))));
evalcond[1]=((((cj1)*(x565)))+(((IkReal(-1.00000000000000))*(x564)*(x566)))+(((sj3)*(x563)))+(((cj3)*(x562)))+(((IkReal(-1.00000000000000))*(cj2)*(x567)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x566))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x568=((cj2)*(px));
IkReal x569=((IkReal(1.00000000000000))*(sj1));
IkReal x570=((cj1)*(py));
IkReal x571=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(0.140720000000000))+(((cj1)*(x568)))+(((IkReal(0.190892000000000))*(cj4)))+(((IkReal(-1.00000000000000))*(x569)*(x571)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x570)))+(((IkReal(-0.000787000000000000))*(sj4)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[3]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x569)))+(((cj2)*(x570)))+(((IkReal(-1.00000000000000))*(x568)*(x569)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x571))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x572=((cj1)*(cj2));
IkReal x573=((IkReal(1.00000000000000))*(sj1));
IkReal x574=((py)*(sj2));
IkReal x575=((cj2)*(sj1));
IkReal x576=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((r01)*(x575)))+(((r00)*(x572)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x573))));
evalcond[3]=((IkReal(0.331612000000000))+(((IkReal(-1.00000000000000))*(x573)*(x576)))+(((py)*(x575)))+(((px)*(x572)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj1)*(x574)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x573)*(x574)))+(((py)*(x572)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x573)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x576))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x577=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x577)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x577)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x578=((cj1)*(cj2));
IkReal x579=((IkReal(1.00000000000000))*(sj1));
IkReal x580=((py)*(sj2));
IkReal x581=((cj2)*(sj1));
IkReal x582=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((r00)*(x578)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x579)))+(((r01)*(x581))));
evalcond[3]=((IkReal(-0.0501720000000000))+(((px)*(x578)))+(((IkReal(-1.00000000000000))*(x579)*(x582)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x581)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x580))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((py)*(x578)))+(((IkReal(-1.00000000000000))*(x579)*(x580)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x579)))+(((IkReal(-1.00000000000000))*(cj1)*(x582)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x583=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x583)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x583)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x584=((IkReal(1.00000000000000))*(sj1));
IkReal x585=((cj2)*(px));
IkReal x586=((cj1)*(py));
IkReal x587=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.139933000000000))+(((sj2)*(x586)))+(((IkReal(-1.00000000000000))*(x584)*(x587)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x585))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x584)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x584)*(x585)))+(((IkReal(-1.00000000000000))*(cj1)*(x587)))+(((cj2)*(x586)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x588=((r01)*(sj2));
IkReal x589=((IkReal(1.00000000000000))*(cj1));
IkReal x590=((r00)*(sj2));
IkReal x591=((cj2)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(x588)*(x589)))+(((IkReal(-1.00000000000000))*(r01)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x589)))+(((sj1)*(x590))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((sj1)*(x588)))+(((cj1)*(x590)))+(((r00)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x589))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x588)*(x589)))+(((IkReal(-1.00000000000000))*(r01)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x589)))+(((sj1)*(x590)))))+IKsqr(((((sj1)*(x588)))+(((cj1)*(x590)))+(((r00)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x589)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x588)*(x589)))+(((IkReal(-1.00000000000000))*(r01)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x589)))+(((sj1)*(x590)))), ((((sj1)*(x588)))+(((cj1)*(x590)))+(((r00)*(x591)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x589)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x592=((cj1)*(r00));
IkReal x593=((cj2)*(r01));
IkReal x594=((IkReal(1.00000000000000))*(sj2));
IkReal x595=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(IKsin(j5))+(((cj2)*(x592)))+(((IkReal(-1.00000000000000))*(x594)*(x595)))+(((sj1)*(x593))));
evalcond[1]=((((cj1)*(x593)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x594)))+(((IkReal(-1.00000000000000))*(x592)*(x594)))+(((IkReal(-1.00000000000000))*(cj2)*(x595)))+(IKcos(j5)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x596=((IkReal(1.00000000000000))*(sj1));
IkReal x597=((cj2)*(px));
IkReal x598=((cj1)*(py));
IkReal x599=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.141507000000000))+(((IkReal(-1.00000000000000))*(x596)*(x599)))+(((cj1)*(x597)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x598)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x596)*(x597)))+(((IkReal(-1.00000000000000))*(cj1)*(x599)))+(((cj2)*(x598)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x596)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x600=((cj1)*(cj2));
IkReal x601=((r01)*(sj1));
IkReal x602=((cj1)*(sj2));
IkReal x603=((r00)*(sj1));
if( IKabs(((((r00)*(x600)))+(((cj2)*(x601)))+(((IkReal(-1.00000000000000))*(sj2)*(x603)))+(((r01)*(x602))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(x602)))+(((cj2)*(x603)))+(((sj2)*(x601)))+(((IkReal(-1.00000000000000))*(r01)*(x600))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x600)))+(((cj2)*(x601)))+(((IkReal(-1.00000000000000))*(sj2)*(x603)))+(((r01)*(x602)))))+IKsqr(((((r00)*(x602)))+(((cj2)*(x603)))+(((sj2)*(x601)))+(((IkReal(-1.00000000000000))*(r01)*(x600)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(x600)))+(((cj2)*(x601)))+(((IkReal(-1.00000000000000))*(sj2)*(x603)))+(((r01)*(x602)))), ((((r00)*(x602)))+(((cj2)*(x603)))+(((sj2)*(x601)))+(((IkReal(-1.00000000000000))*(r01)*(x600)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x604=((cj1)*(r00));
IkReal x605=((cj2)*(r01));
IkReal x606=((IkReal(1.00000000000000))*(sj2));
IkReal x607=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x605)))+(((cj2)*(x604)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x606)*(x607))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x604)*(x606)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(x607)))+(((cj1)*(x605)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x606))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x608=((r01)*(sj2));
IkReal x609=((IkReal(1.00000000000000))*(cj1));
IkReal x610=((r00)*(sj2));
IkReal x611=((cj2)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x608)*(x609)))+(((sj1)*(x610)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x609)))+(((IkReal(-1.00000000000000))*(r01)*(x611))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(x611)))+(((sj1)*(x608)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x609)))+(((cj1)*(x610))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x608)*(x609)))+(((sj1)*(x610)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x609)))+(((IkReal(-1.00000000000000))*(r01)*(x611)))))))+IKsqr(((((r00)*(x611)))+(((sj1)*(x608)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x609)))+(((cj1)*(x610)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x608)*(x609)))+(((sj1)*(x610)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x609)))+(((IkReal(-1.00000000000000))*(r01)*(x611)))))), ((((r00)*(x611)))+(((sj1)*(x608)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x609)))+(((cj1)*(x610)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x612=IKsin(j5);
IkReal x613=((cj1)*(r00));
IkReal x614=((cj2)*(r01));
IkReal x615=((IkReal(1.00000000000000))*(sj2));
IkReal x616=((r00)*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x612)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj4)*(x612)))+(((sj1)*(x614)))+(((cj2)*(x613)))+(((IkReal(-1.00000000000000))*(x615)*(x616))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x616)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x615)))+(((cj1)*(x614)))+(((IkReal(-1.00000000000000))*(x613)*(x615))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x617=IKsin(j5);
IkReal x618=((cj1)*(r00));
IkReal x619=((cj2)*(r01));
IkReal x620=((IkReal(1.00000000000000))*(sj2));
IkReal x621=((r00)*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x617)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj4)*(x617)))+(((sj1)*(x619)))+(((cj2)*(x618)))+(((IkReal(-1.00000000000000))*(x620)*(x621))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x621)))+(IKcos(j5))+(((cj1)*(x619)))+(((IkReal(-1.00000000000000))*(x618)*(x620)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x620))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x622=((cj2)*(px));
IkReal x623=((IkReal(1.00000000000000))*(sj1));
IkReal x624=((cj1)*(py));
IkReal x625=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(-0.125720000000000))+(((IkReal(-1.00000000000000))*(x623)*(x625)))+(((IkReal(0.000787000000000000))*(sj4)))+(((sj2)*(x624)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.190892000000000))*(cj4)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x622))));
evalcond[3]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x625)))+(((IkReal(-1.00000000000000))*(x622)*(x623)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x623)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x624))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x626=((cj1)*(cj2));
IkReal x627=((IkReal(1.00000000000000))*(sj1));
IkReal x628=((py)*(sj2));
IkReal x629=((cj2)*(sj1));
IkReal x630=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x627)))+(((r01)*(x629)))+(((r00)*(x626))));
evalcond[3]=((IkReal(-0.316612000000000))+(((py)*(x629)))+(((IkReal(0.521670000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x627)*(x630)))+(((px)*(x626)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x628))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x630)))+(((py)*(x626)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x627)))+(((IkReal(-1.00000000000000))*(x627)*(x628)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x631=((IkReal(1.00000000000000))*(r00));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x631)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x631)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x631)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x631)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x631)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x631)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x632=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x632)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x632)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x633=((cj1)*(cj2));
IkReal x634=((IkReal(1.00000000000000))*(sj1));
IkReal x635=((py)*(sj2));
IkReal x636=((cj2)*(sj1));
IkReal x637=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x634)))+(((r01)*(x636)))+(((r00)*(x633))));
evalcond[3]=((IkReal(0.0651720000000000))+(((py)*(x636)))+(((IkReal(-1.00000000000000))*(x634)*(x637)))+(((IkReal(0.521670000000000))*(cj2)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x635)))+(((px)*(x633))));
evalcond[4]=((IkReal(-0.312421000000000))+(((py)*(x633)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x637)))+(((IkReal(-1.00000000000000))*(x634)*(x635)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x634)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x638=((IkReal(1.00000000000000))*(r00));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x638)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x638)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x638)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x638)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x638)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x638)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x639=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x639)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x639)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x640=((IkReal(1.00000000000000))*(sj1));
IkReal x641=((cj2)*(px));
IkReal x642=((cj1)*(py));
IkReal x643=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.124933000000000))+(((IkReal(-1.00000000000000))*(x640)*(x643)))+(((cj1)*(x641)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x642)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x643)))+(((IkReal(-1.00000000000000))*(x640)*(x641)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x640)))+(((cj2)*(x642)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x644=((cj1)*(r00));
IkReal x645=((cj2)*(r01));
IkReal x646=((IkReal(1.00000000000000))*(sj2));
IkReal x647=((r00)*(sj1));
if( IKabs(((((cj1)*(r01)*(sj2)))+(((sj1)*(x645)))+(((IkReal(-1.00000000000000))*(x646)*(x647)))+(((cj2)*(x644))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(x647)))+(((cj1)*(x645)))+(((IkReal(-1.00000000000000))*(x644)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x646))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)*(sj2)))+(((sj1)*(x645)))+(((IkReal(-1.00000000000000))*(x646)*(x647)))+(((cj2)*(x644)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(x647)))+(((cj1)*(x645)))+(((IkReal(-1.00000000000000))*(x644)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x646)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)*(sj2)))+(((sj1)*(x645)))+(((IkReal(-1.00000000000000))*(x646)*(x647)))+(((cj2)*(x644)))), ((((IkReal(-1.00000000000000))*(cj2)*(x647)))+(((cj1)*(x645)))+(((IkReal(-1.00000000000000))*(x644)*(x646)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x646)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x648=((cj1)*(r00));
IkReal x649=((cj2)*(r01));
IkReal x650=((IkReal(1.00000000000000))*(sj2));
IkReal x651=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x649)))+(((cj2)*(x648)))+(((IkReal(-1.00000000000000))*(x650)*(x651)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x651)))+(((cj1)*(x649)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x650)))+(((IkReal(-1.00000000000000))*(x648)*(x650))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x652=((IkReal(1.00000000000000))*(sj1));
IkReal x653=((cj2)*(px));
IkReal x654=((cj1)*(py));
IkReal x655=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.126507000000000))+(((cj1)*(x653)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x654)))+(((IkReal(-1.00000000000000))*(x652)*(x655)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x655)))+(((cj2)*(x654)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x652)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x652)*(x653))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x656=((r00)*(sj1));
IkReal x657=((IkReal(1.00000000000000))*(cj2));
IkReal x658=((r01)*(sj1));
IkReal x659=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((IkReal(-1.00000000000000))*(r01)*(x659)))+(((sj2)*(x656)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x657))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x658)))+(((IkReal(-1.00000000000000))*(r00)*(x659)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((IkReal(-1.00000000000000))*(r01)*(x659)))+(((sj2)*(x656)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x657)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x658)))+(((IkReal(-1.00000000000000))*(r00)*(x659)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x657)*(x658)))+(((IkReal(-1.00000000000000))*(r01)*(x659)))+(((sj2)*(x656)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x657)))), ((((IkReal(-1.00000000000000))*(sj2)*(x658)))+(((IkReal(-1.00000000000000))*(r00)*(x659)))+(((IkReal(-1.00000000000000))*(x656)*(x657)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x660=((cj1)*(r00));
IkReal x661=((cj2)*(r01));
IkReal x662=((IkReal(1.00000000000000))*(sj2));
IkReal x663=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x662)*(x663)))+(((cj2)*(x660)))+(((sj1)*(x661)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(x660)*(x662)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(cj2)*(x663)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x662)))+(((cj1)*(x661))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x664=((cj1)*(r00));
IkReal x665=((cj2)*(r01));
IkReal x666=((IkReal(1.00000000000000))*(sj2));
IkReal x667=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x664)))+(((sj1)*(x665)))+(((IkReal(-1.00000000000000))*(x666)*(x667))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(x667)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x666)))+(((cj1)*(x665)))+(((IkReal(-1.00000000000000))*(x664)*(x666))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x664)))+(((sj1)*(x665)))+(((IkReal(-1.00000000000000))*(x666)*(x667)))))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(x667)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x666)))+(((cj1)*(x665)))+(((IkReal(-1.00000000000000))*(x664)*(x666)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x664)))+(((sj1)*(x665)))+(((IkReal(-1.00000000000000))*(x666)*(x667)))))), ((((IkReal(-1.00000000000000))*(cj2)*(x667)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x666)))+(((cj1)*(x665)))+(((IkReal(-1.00000000000000))*(x664)*(x666)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x668=IKsin(j5);
IkReal x669=((cj1)*(r00));
IkReal x670=((cj2)*(r01));
IkReal x671=((IkReal(1.00000000000000))*(sj2));
IkReal x672=((r00)*(sj1));
IkReal x673=((IkReal(1.00000000000000))*(x668));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x673)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x669)))+(((IkReal(-1.00000000000000))*(sj4)*(x673)))+(((IkReal(-1.00000000000000))*(x671)*(x672)))+(((sj1)*(x670))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x671)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x669)*(x671)))+(((IkReal(-1.00000000000000))*(cj2)*(x672)))+(((cj1)*(x670))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x674=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x674)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x674))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x674)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x674)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x674)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x674)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x675=IKsin(j5);
IkReal x676=((cj1)*(r00));
IkReal x677=((cj2)*(r01));
IkReal x678=((IkReal(1.00000000000000))*(sj2));
IkReal x679=((r00)*(sj1));
IkReal x680=((IkReal(1.00000000000000))*(x675));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x680)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x676)))+(((IkReal(-1.00000000000000))*(x678)*(x679)))+(((sj1)*(x677)))+(((IkReal(-1.00000000000000))*(sj4)*(x680))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x678)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x676)*(x678)))+(((IkReal(-1.00000000000000))*(cj2)*(x679)))+(((cj1)*(x677))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x681=((cj2)*(px));
IkReal x682=((IkReal(1.00000000000000))*(sj1));
IkReal x683=((cj1)*(py));
IkReal x684=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(0.0588310000000000))+(((cj1)*(x681)))+(((sj2)*(x683)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x682)*(x684)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[3]=((IkReal(-0.394310000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x681)*(x682)))+(((IkReal(0.000787000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x682)))+(((IkReal(-0.190892000000000))*(cj4)))+(((cj2)*(x683)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x684))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x685=((cj2)*(px));
IkReal x686=((IkReal(1.00000000000000))*(sj1));
IkReal x687=((cj1)*(py));
IkReal x688=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x688)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x686)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x686)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(0.0588310000000000))+(((cj1)*(x685)))+(((sj2)*(x687)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x686)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.585202000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x685)*(x686)))+(((IkReal(-1.00000000000000))*(px)*(x688)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x686)))+(((cj2)*(x687)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x689=((IkReal(1.00000000000000))*(cj2));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x689)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x689)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x689)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x689)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x689)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x689)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x690=((cj2)*(px));
IkReal x691=((IkReal(1.00000000000000))*(sj1));
IkReal x692=((cj1)*(py));
IkReal x693=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x693)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x691)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x691))));
evalcond[3]=((IkReal(0.0588310000000000))+(((cj1)*(x690)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x692)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x691)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.203418000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x693)))+(((IkReal(-1.00000000000000))*(x690)*(x691)))+(((cj2)*(x692)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x691)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x694=((IkReal(1.00000000000000))*(r01));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x694)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x694)))+(((r00)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x694)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x694)))+(((r00)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x694)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x694)))+(((r00)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x695=((IkReal(1.00000000000000))*(sj1));
IkReal x696=((cj2)*(px));
IkReal x697=((cj1)*(py));
IkReal x698=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((cj1)*(x696)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x695)*(x698)))+(((sj2)*(x697)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.393523000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x698)))+(((IkReal(-1.00000000000000))*(x695)*(x696)))+(((cj2)*(x697)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x695)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x699=((r00)*(sj1));
IkReal x700=((IkReal(1.00000000000000))*(cj2));
IkReal x701=((r01)*(sj1));
IkReal x702=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x701)))+(((IkReal(-1.00000000000000))*(x699)*(x700)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x702))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x700)))+(((sj2)*(x699)))+(((IkReal(-1.00000000000000))*(r01)*(x702)))+(((IkReal(-1.00000000000000))*(x700)*(x701))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x701)))+(((IkReal(-1.00000000000000))*(x699)*(x700)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x702)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x700)))+(((sj2)*(x699)))+(((IkReal(-1.00000000000000))*(r01)*(x702)))+(((IkReal(-1.00000000000000))*(x700)*(x701)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj2)*(x701)))+(((IkReal(-1.00000000000000))*(x699)*(x700)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x702)))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x700)))+(((sj2)*(x699)))+(((IkReal(-1.00000000000000))*(r01)*(x702)))+(((IkReal(-1.00000000000000))*(x700)*(x701)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x703=((cj1)*(r00));
IkReal x704=((cj2)*(r01));
IkReal x705=((IkReal(1.00000000000000))*(sj2));
IkReal x706=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(x705)*(x706)))+(((sj1)*(x704)))+(((cj2)*(x703))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x705)))+(((IkReal(-1.00000000000000))*(cj2)*(x706)))+(((IkReal(-1.00000000000000))*(x703)*(x705)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(x704))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x707=((IkReal(1.00000000000000))*(sj1));
IkReal x708=((cj2)*(px));
IkReal x709=((cj1)*(py));
IkReal x710=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((IkReal(-1.00000000000000))*(x707)*(x710)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x709)))+(((cj1)*(x708)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.395097000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x707)*(x708)))+(((IkReal(-1.00000000000000))*(cj1)*(x710)))+(((cj2)*(x709)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x707)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x711=((r01)*(sj2));
IkReal x712=((IkReal(1.00000000000000))*(cj1));
IkReal x713=((r00)*(sj2));
IkReal x714=((cj2)*(sj1));
if( IKabs(((((r00)*(x714)))+(((sj1)*(x711)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x712)))+(((cj1)*(x713))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(r01)*(x714)))+(((sj1)*(x713)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x712))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x714)))+(((sj1)*(x711)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x712)))+(((cj1)*(x713)))))+IKsqr(((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(r01)*(x714)))+(((sj1)*(x713)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x712)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(x714)))+(((sj1)*(x711)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x712)))+(((cj1)*(x713)))), ((((IkReal(-1.00000000000000))*(x711)*(x712)))+(((IkReal(-1.00000000000000))*(r01)*(x714)))+(((sj1)*(x713)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x712)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x715=((cj1)*(r00));
IkReal x716=((cj2)*(r01));
IkReal x717=((IkReal(1.00000000000000))*(sj2));
IkReal x718=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x717)*(x718)))+(IKcos(j5))+(((sj1)*(x716)))+(((cj2)*(x715))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x717)))+(((IkReal(-1.00000000000000))*(cj2)*(x718)))+(IKsin(j5))+(((cj1)*(x716)))+(((IkReal(-1.00000000000000))*(x715)*(x717))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x719=((r00)*(sj1));
IkReal x720=((IkReal(1.00000000000000))*(cj2));
IkReal x721=((r01)*(sj1));
IkReal x722=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x722)))+(((IkReal(-1.00000000000000))*(sj2)*(x721)))+(((IkReal(-1.00000000000000))*(x719)*(x720)))+(((cj1)*(cj2)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((sj2)*(x719)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x720)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(-1.00000000000000))*(r01)*(x722))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x722)))+(((IkReal(-1.00000000000000))*(sj2)*(x721)))+(((IkReal(-1.00000000000000))*(x719)*(x720)))+(((cj1)*(cj2)*(r01)))))))+IKsqr(((((sj2)*(x719)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x720)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(-1.00000000000000))*(r01)*(x722)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x722)))+(((IkReal(-1.00000000000000))*(sj2)*(x721)))+(((IkReal(-1.00000000000000))*(x719)*(x720)))+(((cj1)*(cj2)*(r01)))))), ((((sj2)*(x719)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x720)))+(((IkReal(-1.00000000000000))*(x720)*(x721)))+(((IkReal(-1.00000000000000))*(r01)*(x722)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x723=IKsin(j5);
IkReal x724=((cj1)*(r00));
IkReal x725=((cj2)*(r01));
IkReal x726=((IkReal(1.00000000000000))*(sj2));
IkReal x727=((r00)*(sj1));
IkReal x728=((IkReal(1.00000000000000))*(x723));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x728)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(IKcos(j5))+(((cj2)*(x724)))+(((IkReal(-1.00000000000000))*(x726)*(x727)))+(((sj1)*(x725))));
evalcond[2]=((((cj1)*(x725)))+(((IkReal(-1.00000000000000))*(x724)*(x726)))+(((IkReal(-1.00000000000000))*(cj2)*(x727)))+(((IkReal(-1.00000000000000))*(sj4)*(x728)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x726))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x729=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x729)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x729)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x729)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x729)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x729)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x729)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x730=IKsin(j5);
IkReal x731=((cj1)*(r00));
IkReal x732=((cj2)*(r01));
IkReal x733=((IkReal(1.00000000000000))*(sj2));
IkReal x734=((r00)*(sj1));
IkReal x735=((IkReal(1.00000000000000))*(x730));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x735))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x733)*(x734)))+(IKcos(j5))+(((cj2)*(x731)))+(((sj1)*(x732))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x734)))+(((IkReal(-1.00000000000000))*(x731)*(x733)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x733)))+(((IkReal(-1.00000000000000))*(sj4)*(x735)))+(((cj1)*(x732))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x736=((cj2)*(px));
IkReal x737=((IkReal(1.00000000000000))*(sj1));
IkReal x738=((cj1)*(py));
IkReal x739=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(-0.0438310000000000))+(((sj2)*(x738)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x737)*(x739)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x736))));
evalcond[3]=((IkReal(-0.127870000000000))+(((IkReal(0.190892000000000))*(cj4)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x736)*(x737)))+(((IkReal(-1.00000000000000))*(cj1)*(x739)))+(((cj2)*(x738)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-0.000787000000000000))*(sj4)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x737))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x740=((cj2)*(px));
IkReal x741=((IkReal(1.00000000000000))*(sj1));
IkReal x742=((cj1)*(py));
IkReal x743=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x741)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x741)))+(((IkReal(-1.00000000000000))*(r00)*(x743)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x740)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x741)))+(((sj2)*(x742)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(0.0630220000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x743)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x741)))+(((cj2)*(x742)))+(((IkReal(-1.00000000000000))*(x740)*(x741)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x744=((cj2)*(px));
IkReal x745=((IkReal(1.00000000000000))*(sj1));
IkReal x746=((cj1)*(py));
IkReal x747=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x745)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x745)))+(((IkReal(-1.00000000000000))*(r00)*(x747)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x744)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x745)))+(((sj2)*(x746)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.318762000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(px)*(x747)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x745)))+(((cj2)*(x746)))+(((IkReal(-1.00000000000000))*(x744)*(x745)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x748=((IkReal(1.00000000000000))*(sj1));
IkReal x749=((cj2)*(px));
IkReal x750=((cj1)*(py));
IkReal x751=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x749)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x750)))+(((IkReal(-1.00000000000000))*(x748)*(x751)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.128657000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x748)))+(((cj2)*(x750)))+(((IkReal(-1.00000000000000))*(cj1)*(x751)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x748)*(x749))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x752=((cj1)*(cj2));
IkReal x753=((r01)*(sj1));
IkReal x754=((cj1)*(sj2));
IkReal x755=((r00)*(sj1));
if( IKabs(((((cj2)*(x755)))+(((r00)*(x754)))+(((sj2)*(x753)))+(((IkReal(-1.00000000000000))*(r01)*(x752))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj2)*(x755)))+(((cj2)*(x753)))+(((r01)*(x754)))+(((r00)*(x752))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(x755)))+(((r00)*(x754)))+(((sj2)*(x753)))+(((IkReal(-1.00000000000000))*(r01)*(x752)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj2)*(x755)))+(((cj2)*(x753)))+(((r01)*(x754)))+(((r00)*(x752)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(x755)))+(((r00)*(x754)))+(((sj2)*(x753)))+(((IkReal(-1.00000000000000))*(r01)*(x752)))), ((((IkReal(-1.00000000000000))*(sj2)*(x755)))+(((cj2)*(x753)))+(((r01)*(x754)))+(((r00)*(x752)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x756=((cj1)*(cj2));
IkReal x757=((cj2)*(sj1));
IkReal x758=((IkReal(1.00000000000000))*(r00));
IkReal x759=((cj1)*(sj2));
IkReal x760=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(x758)*(x760)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r01)*(x759)))+(((r01)*(x757)))+(((r00)*(x756))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x760)))+(IKsin(j5))+(((r01)*(x756)))+(((IkReal(-1.00000000000000))*(x758)*(x759)))+(((IkReal(-1.00000000000000))*(x757)*(x758))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x761=((IkReal(1.00000000000000))*(sj1));
IkReal x762=((cj2)*(px));
IkReal x763=((cj1)*(py));
IkReal x764=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x762)))+(((sj2)*(x763)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x761)*(x764))));
evalcond[4]=((IkReal(-0.127083000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj2)*(x763)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x761)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x761)*(x762)))+(((IkReal(-1.00000000000000))*(cj1)*(x764))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x765=((cj1)*(r00));
IkReal x766=((cj2)*(r01));
IkReal x767=((IkReal(1.00000000000000))*(sj2));
IkReal x768=((r00)*(sj1));
if( IKabs(((((cj1)*(x766)))+(((IkReal(-1.00000000000000))*(x765)*(x767)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x767)))+(((IkReal(-1.00000000000000))*(cj2)*(x768))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(x765)))+(((sj1)*(x766)))+(((IkReal(-1.00000000000000))*(x767)*(x768))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(x766)))+(((IkReal(-1.00000000000000))*(x765)*(x767)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x767)))+(((IkReal(-1.00000000000000))*(cj2)*(x768)))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(x765)))+(((sj1)*(x766)))+(((IkReal(-1.00000000000000))*(x767)*(x768)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(x766)))+(((IkReal(-1.00000000000000))*(x765)*(x767)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x767)))+(((IkReal(-1.00000000000000))*(cj2)*(x768)))), ((((cj1)*(r01)*(sj2)))+(((cj2)*(x765)))+(((sj1)*(x766)))+(((IkReal(-1.00000000000000))*(x767)*(x768)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x769=((cj1)*(cj2));
IkReal x770=((cj2)*(sj1));
IkReal x771=((IkReal(1.00000000000000))*(r00));
IkReal x772=((cj1)*(sj2));
IkReal x773=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x771)*(x773)))+(((r01)*(x772)))+(((r01)*(x770)))+(((r00)*(x769))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(-1.00000000000000))*(r01)*(x773)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x770)*(x771)))+(((r01)*(x769))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x774=((cj1)*(cj2));
IkReal x775=((r01)*(sj1));
IkReal x776=((cj1)*(sj2));
IkReal x777=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj2)*(x777)))+(((IkReal(-1.00000000000000))*(r01)*(x774)))+(((sj2)*(x775)))+(((r00)*(x776))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(x775)))+(((r01)*(x776)))+(((r00)*(x774)))+(((IkReal(-1.00000000000000))*(sj2)*(x777))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj2)*(x777)))+(((IkReal(-1.00000000000000))*(r01)*(x774)))+(((sj2)*(x775)))+(((r00)*(x776)))))))+IKsqr(((((cj2)*(x775)))+(((r01)*(x776)))+(((r00)*(x774)))+(((IkReal(-1.00000000000000))*(sj2)*(x777)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj2)*(x777)))+(((IkReal(-1.00000000000000))*(r01)*(x774)))+(((sj2)*(x775)))+(((r00)*(x776)))))), ((((cj2)*(x775)))+(((r01)*(x776)))+(((r00)*(x774)))+(((IkReal(-1.00000000000000))*(sj2)*(x777)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x778=IKsin(j5);
IkReal x779=((cj1)*(cj2));
IkReal x780=((cj2)*(sj1));
IkReal x781=((IkReal(1.00000000000000))*(r00));
IkReal x782=((cj1)*(sj2));
IkReal x783=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x778)))+(r02));
evalcond[1]=((((r01)*(x782)))+(((r01)*(x780)))+(((IkReal(-1.00000000000000))*(x781)*(x783)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r00)*(x779))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x783)))+(((sj4)*(x778)))+(((IkReal(-1.00000000000000))*(x781)*(x782)))+(((r01)*(x779)))+(((IkReal(-1.00000000000000))*(x780)*(x781))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x784=IKsin(j5);
IkReal x785=((cj1)*(cj2));
IkReal x786=((cj2)*(sj1));
IkReal x787=((IkReal(1.00000000000000))*(r00));
IkReal x788=((cj1)*(sj2));
IkReal x789=((sj1)*(sj2));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x784))));
evalcond[1]=((((r00)*(x785)))+(((r01)*(x786)))+(((r01)*(x788)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x787)*(x789))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x789)))+(((r01)*(x785)))+(((sj4)*(x784)))+(((IkReal(-1.00000000000000))*(x787)*(x788)))+(((IkReal(-1.00000000000000))*(x786)*(x787))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x790=((IkReal(1.00000000000000))*(sj1));
IkReal x791=((cj2)*(px));
IkReal x792=((cj1)*(py));
IkReal x793=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((IkReal(0.00750000000000000))+(((cj1)*(x791)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x790)*(x793)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.324112000000000))*(sj3)))+(((IkReal(0.00982000000000000))*(sj2)))+(((sj2)*(x792))));
evalcond[3]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x790)*(x791)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x790)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-0.324112000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x793)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x792))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x794=((IkReal(1.00000000000000))*(cj2));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x794)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x794)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x794)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x794)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x795=IKcos(j5);
IkReal x796=((cj1)*(r00));
IkReal x797=((cj2)*(r01));
IkReal x798=((IkReal(1.00000000000000))*(sj2));
IkReal x799=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x798)*(x799)))+(((cj1)*(r01)*(sj2)))+(((sj1)*(x797)))+(((cj3)*(x795)))+(((cj2)*(x796))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x796)*(x798)))+(((cj1)*(x797)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x798)))+(((IkReal(-1.00000000000000))*(cj2)*(x799)))+(((sj3)*(x795))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x800=IKcos(j5);
IkReal x801=((cj1)*(r00));
IkReal x802=((cj2)*(r01));
IkReal x803=((IkReal(1.00000000000000))*(sj2));
IkReal x804=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x801)))+(((cj3)*(x800)))+(((IkReal(-1.00000000000000))*(x803)*(x804)))+(((sj1)*(x802))));
evalcond[2]=((((sj3)*(x800)))+(((cj1)*(x802)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x803)))+(((IkReal(-1.00000000000000))*(x801)*(x803)))+(((IkReal(-1.00000000000000))*(cj2)*(x804))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x805=((IkReal(1.00000000000000))*(sj1));
IkReal x806=((cj2)*(px));
IkReal x807=((cj1)*(py));
IkReal x808=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((IkReal(0.00750000000000000))+(((sj2)*(x807)))+(((IkReal(-1.00000000000000))*(x805)*(x808)))+(((cj1)*(x806)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.0576720000000000))*(sj3)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[3]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(0.0576720000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x805)*(x806)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x805)))+(((cj2)*(x807)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x808)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x809=((IkReal(1.00000000000000))*(r01));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x809)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((r00)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x810=IKcos(j5);
IkReal x811=((cj1)*(r00));
IkReal x812=((cj2)*(sj1));
IkReal x813=((IkReal(1.00000000000000))*(sj2));
IkReal x814=((cj1)*(r01));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj3)*(x810)))+(((r01)*(x812)))+(((sj2)*(x814)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(x813)))+(((cj2)*(x811))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x813)))+(((IkReal(-1.00000000000000))*(r00)*(x812)))+(((IkReal(-1.00000000000000))*(x811)*(x813)))+(((sj3)*(x810)))+(((cj2)*(x814))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x815=IKcos(j5);
IkReal x816=((cj1)*(r00));
IkReal x817=((cj2)*(sj1));
IkReal x818=((IkReal(1.00000000000000))*(sj2));
IkReal x819=((cj1)*(r01));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj3)*(x815)))+(((r01)*(x817)))+(((sj2)*(x819)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(x818)))+(((cj2)*(x816))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x818)))+(((IkReal(-1.00000000000000))*(x816)*(x818)))+(((IkReal(-1.00000000000000))*(r00)*(x817)))+(((sj3)*(x815)))+(((cj2)*(x819))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x820=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x821=((cj4)*(sj1));
IkReal x822=((IkReal(1.00000000000000))*(cj1)*(cj4));
if( IKabs(((r02)*(x820))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x820)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x822)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x821)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x822)))+(((r00)*(sj2)*(x821))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(x820)))+IKsqr(((x820)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x822)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x821)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x822)))+(((r00)*(sj2)*(x821)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(x820)), ((x820)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x822)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x821)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x822)))+(((r00)*(sj2)*(x821)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x823=IKsin(j5);
IkReal x824=IKcos(j5);
IkReal x825=((cj1)*(r00));
IkReal x826=((cj2)*(r01));
IkReal x827=((IkReal(1.00000000000000))*(sj2));
IkReal x828=((r00)*(sj1));
IkReal x829=((IkReal(1.00000000000000))*(x823));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x829)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj3)*(sj4)*(x823)))+(((sj1)*(x826)))+(((IkReal(-1.00000000000000))*(x827)*(x828)))+(((cj3)*(x824)))+(((cj2)*(x825))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x828)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x829)))+(((sj3)*(x824)))+(((cj1)*(x826)))+(((IkReal(-1.00000000000000))*(x825)*(x827)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x827))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x830=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x831=((cj4)*(r00));
IkReal x832=((cj4)*(r01));
if( IKabs(((r02)*(x830))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x830)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj1)*(sj2)*(x832)))+(((cj2)*(sj1)*(x831)))+(((cj1)*(sj2)*(x831)))+(((cj3)*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x832))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(x830)))+IKsqr(((x830)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj1)*(sj2)*(x832)))+(((cj2)*(sj1)*(x831)))+(((cj1)*(sj2)*(x831)))+(((cj3)*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x832)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(x830)), ((x830)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj1)*(sj2)*(x832)))+(((cj2)*(sj1)*(x831)))+(((cj1)*(sj2)*(x831)))+(((cj3)*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x832)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x833=IKsin(j5);
IkReal x834=IKcos(j5);
IkReal x835=((cj1)*(r00));
IkReal x836=((cj2)*(r01));
IkReal x837=((IkReal(1.00000000000000))*(sj2));
IkReal x838=((r00)*(sj1));
IkReal x839=((IkReal(1.00000000000000))*(x833));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x839)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x837)*(x838)))+(((sj3)*(sj4)*(x833)))+(((cj3)*(x834)))+(((cj2)*(x835)))+(((sj1)*(x836))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x837)))+(((IkReal(-1.00000000000000))*(x835)*(x837)))+(((IkReal(-1.00000000000000))*(cj2)*(x838)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x839)))+(((sj3)*(x834)))+(((cj1)*(x836))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x840=(cj3)*(cj3);
IkReal x841=(sj3)*(sj3);
IkReal x842=((IkReal(1.00000000000000))*(r00));
IkReal x843=((cj2)*(cj3));
IkReal x844=((cj1)*(r01));
IkReal x845=((IkReal(1.00000000000000))*(r01));
IkReal x846=((sj1)*(sj3));
IkReal x847=((cj3)*(sj2));
IkReal x848=((cj2)*(sj3));
IkReal x849=((cj1)*(sj2)*(sj3));
if( IKabs(((((IKabs(((((sj4)*(x840)))+(((sj4)*(x841))))) != 0)?((IkReal)1/(((((sj4)*(x840)))+(((sj4)*(x841)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x844)))+(((r00)*(sj2)*(x846)))+(((x843)*(x844)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(sj1)*(x845)*(x847)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x848)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x847)))+(((IkReal(-1.00000000000000))*(cj2)*(x845)*(x846))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840)))))):(IkReal)1.0e30))*(((((cj1)*(r00)*(x843)))+(((r01)*(sj1)*(x843)))+(((IkReal(-1.00000000000000))*(cj2)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(x842)*(x849)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x847)))+(((x844)*(x848)))+(((x844)*(x847)))+(((IkReal(-1.00000000000000))*(sj2)*(x845)*(x846))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((sj4)*(x840)))+(((sj4)*(x841))))) != 0)?((IkReal)1/(((((sj4)*(x840)))+(((sj4)*(x841)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x844)))+(((r00)*(sj2)*(x846)))+(((x843)*(x844)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(sj1)*(x845)*(x847)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x848)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x847)))+(((IkReal(-1.00000000000000))*(cj2)*(x845)*(x846)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840)))))):(IkReal)1.0e30))*(((((cj1)*(r00)*(x843)))+(((r01)*(sj1)*(x843)))+(((IkReal(-1.00000000000000))*(cj2)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(x842)*(x849)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x847)))+(((x844)*(x848)))+(((x844)*(x847)))+(((IkReal(-1.00000000000000))*(sj2)*(x845)*(x846)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((sj4)*(x840)))+(((sj4)*(x841))))) != 0)?((IkReal)1/(((((sj4)*(x840)))+(((sj4)*(x841)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x844)))+(((r00)*(sj2)*(x846)))+(((x843)*(x844)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(sj1)*(x845)*(x847)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x848)))+(((IkReal(-1.00000000000000))*(cj1)*(x842)*(x847)))+(((IkReal(-1.00000000000000))*(cj2)*(x845)*(x846)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x841)))+(((IkReal(-1.00000000000000))*(x840)))))):(IkReal)1.0e30))*(((((cj1)*(r00)*(x843)))+(((r01)*(sj1)*(x843)))+(((IkReal(-1.00000000000000))*(cj2)*(x842)*(x846)))+(((IkReal(-1.00000000000000))*(x842)*(x849)))+(((IkReal(-1.00000000000000))*(sj1)*(x842)*(x847)))+(((x844)*(x848)))+(((x844)*(x847)))+(((IkReal(-1.00000000000000))*(sj2)*(x845)*(x846)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x850=IKsin(j5);
IkReal x851=IKcos(j5);
IkReal x852=((cj1)*(r00));
IkReal x853=((cj2)*(r01));
IkReal x854=((IkReal(1.00000000000000))*(sj2));
IkReal x855=((r00)*(sj1));
IkReal x856=((IkReal(1.00000000000000))*(x850));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x856))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x852)))+(((cj3)*(x851)))+(((sj1)*(x853)))+(((IkReal(-1.00000000000000))*(x854)*(x855)))+(((sj3)*(sj4)*(x850))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x856)))+(((IkReal(-1.00000000000000))*(x852)*(x854)))+(((sj3)*(x851)))+(((cj1)*(x853)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x854)))+(((IkReal(-1.00000000000000))*(cj2)*(x855))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x857=((IkReal(787000000.000000))*(cj2));
IkReal x858=((cj1)*(px));
IkReal x859=((py)*(sj1));
IkReal x860=((IkReal(190892000000.000))*(cj2));
IkReal x861=((IkReal(787000000.000000))*(sj2));
IkReal x862=((cj1)*(py));
IkReal x863=((px)*(sj1));
IkReal x864=((IkReal(190892000000.000))*(sj2));
IkReal x865=((pz)*(sj3));
if( IKabs(((gconst0)*(((IkReal(5902500.00000000))+(((IkReal(104844140.000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x861)*(x863)))+(((x861)*(x862)))+(((IkReal(410554290.000000))*(cj2)))+(((x857)*(x858)))+(((x857)*(x859)))+(((IkReal(7728340.00000000))*(sj2)))+(((IkReal(-190892000000.000))*(x865)))+(((IkReal(40397497.0000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(-1431690000.00000))+(((IkReal(-99582629640.0000))*(cj2)))+(((x863)*(x864)))+(((IkReal(-787000000.000000))*(x865)))+(((IkReal(-1.00000000000000))*(x862)*(x864)))+(((IkReal(-25430632240.0000))*(sj3)))+(((IkReal(-9798677252.00000))*(cj3)))+(((IkReal(-1.00000000000000))*(x858)*(x860)))+(((IkReal(-1.00000000000000))*(x859)*(x860)))+(((IkReal(-1874559440.00000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((IkReal(5902500.00000000))+(((IkReal(104844140.000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x861)*(x863)))+(((x861)*(x862)))+(((IkReal(410554290.000000))*(cj2)))+(((x857)*(x858)))+(((x857)*(x859)))+(((IkReal(7728340.00000000))*(sj2)))+(((IkReal(-190892000000.000))*(x865)))+(((IkReal(40397497.0000000))*(cj3)))))), ((gconst0)*(((IkReal(-1431690000.00000))+(((IkReal(-99582629640.0000))*(cj2)))+(((x863)*(x864)))+(((IkReal(-787000000.000000))*(x865)))+(((IkReal(-1.00000000000000))*(x862)*(x864)))+(((IkReal(-25430632240.0000))*(sj3)))+(((IkReal(-9798677252.00000))*(cj3)))+(((IkReal(-1.00000000000000))*(x858)*(x860)))+(((IkReal(-1.00000000000000))*(x859)*(x860)))+(((IkReal(-1874559440.00000))*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x866=IKcos(j4);
IkReal x867=IKsin(j4);
IkReal x868=((cj2)*(px));
IkReal x869=((IkReal(1.00000000000000))*(sj1));
IkReal x870=((cj2)*(py));
IkReal x871=((cj1)*(sj2));
IkReal x872=((IkReal(0.000787000000000000))*(x867));
IkReal x873=((IkReal(0.190892000000000))*(x866));
evalcond[0]=((((IkReal(0.000787000000000000))*(x866)))+(pz)+(((IkReal(0.190892000000000))*(x867))));
evalcond[1]=((IkReal(0.00750000000000000))+(((sj3)*(x873)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x869)))+(((IkReal(0.133220000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj3)*(x872)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj1)*(x868)))+(((sj1)*(x870)))+(((py)*(x871)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[2]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj3)*(x872)))+(((IkReal(-1.00000000000000))*(cj3)*(x873)))+(((IkReal(-1.00000000000000))*(x868)*(x869)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x869)))+(((IkReal(-0.133220000000000))*(cj3)))+(((cj1)*(x870)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px)*(x871)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x874=(cj3)*(cj3);
IkReal x875=(sj3)*(sj3);
dummyeval[0]=((((sj4)*(x875)))+(((sj4)*(x874))));
dummyeval[1]=((((IkReal(-1.00000000000000))*(x874)))+(((IkReal(-1.00000000000000))*(x875))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x876=((cj2)*(px));
IkReal x877=((IkReal(1.00000000000000))*(sj1));
IkReal x878=((cj1)*(py));
IkReal x879=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.00750000000000000))+(((IkReal(-1.00000000000000))*(x877)*(x879)))+(((sj2)*(x878)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x876)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.132433000000000))*(sj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x876)*(x877)))+(((cj2)*(x878)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x877)))+(((IkReal(-0.132433000000000))*(cj3)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x879)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((sj3)*(sj3))+((cj3)*(cj3))));
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x880=((cj3)*(sj1));
IkReal x881=((r00)*(sj2));
IkReal x882=((IkReal(1.00000000000000))*(r01));
IkReal x883=((cj1)*(cj3));
IkReal x884=((cj1)*(sj3));
IkReal x885=((sj1)*(sj3));
IkReal x886=((cj2)*(x885));
IkReal x887=((IkReal(1.00000000000000))*(cj2)*(r00));
if( IKabs(((gconst2)*(((((x881)*(x885)))+(((IkReal(-1.00000000000000))*(x882)*(x886)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((cj2)*(r01)*(x883)))+(((IkReal(-1.00000000000000))*(sj2)*(x882)*(x884)))+(((IkReal(-1.00000000000000))*(sj2)*(x880)*(x882)))+(((IkReal(-1.00000000000000))*(x884)*(x887)))+(((IkReal(-1.00000000000000))*(x880)*(x887))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x883)*(x887)))+(((x881)*(x884)))+(((x880)*(x881)))+(((r01)*(sj2)*(x885)))+(((r00)*(x886)))+(((IkReal(-1.00000000000000))*(cj2)*(x882)*(x884)))+(((IkReal(-1.00000000000000))*(sj2)*(x882)*(x883)))+(((IkReal(-1.00000000000000))*(cj2)*(x880)*(x882))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst2)*(((((x881)*(x885)))+(((IkReal(-1.00000000000000))*(x882)*(x886)))+(((IkReal(-1.00000000000000))*(x881)*(x883)))+(((cj2)*(r01)*(x883)))+(((IkReal(-1.00000000000000))*(sj2)*(x882)*(x884)))+(((IkReal(-1.00000000000000))*(sj2)*(x880)*(x882)))+(((IkReal(-1.00000000000000))*(x884)*(x887)))+(((IkReal(-1.00000000000000))*(x880)*(x887)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x883)*(x887)))+(((x881)*(x884)))+(((x880)*(x881)))+(((r01)*(sj2)*(x885)))+(((r00)*(x886)))+(((IkReal(-1.00000000000000))*(cj2)*(x882)*(x884)))+(((IkReal(-1.00000000000000))*(sj2)*(x882)*(x883)))+(((IkReal(-1.00000000000000))*(cj2)*(x880)*(x882)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x888=IKcos(j5);
IkReal x889=IKsin(j5);
IkReal x890=((cj1)*(r00));
IkReal x891=((cj2)*(r01));
IkReal x892=((IkReal(1.00000000000000))*(sj2));
IkReal x893=((r00)*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(x892)*(x893)))+(((cj3)*(x888)))+(((cj1)*(r01)*(sj2)))+(((cj2)*(x890)))+(((sj1)*(x891)))+(((sj3)*(x889))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x892)))+(((IkReal(-1.00000000000000))*(cj2)*(x893)))+(((sj3)*(x888)))+(((cj1)*(x891)))+(((IkReal(-1.00000000000000))*(cj3)*(x889)))+(((IkReal(-1.00000000000000))*(x890)*(x892))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x894=((cj2)*(px));
IkReal x895=((IkReal(1.00000000000000))*(sj1));
IkReal x896=((py)*(sj2));
IkReal x897=((px)*(sj2));
IkReal x898=((cj2)*(py));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.00750000000000000))+(((sj1)*(x898)))+(((IkReal(-1.00000000000000))*(x895)*(x897)))+(((IkReal(0.134007000000000))*(sj3)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj1)*(x894)))+(((cj1)*(x896)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x897)))+(((IkReal(-0.134007000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x895)*(x896)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x894)*(x895)))+(((cj1)*(x898)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((sj3)*(sj3))+((cj3)*(cj3))));
dummyeval[0]=(((sj3)*(sj3))+((cj3)*(cj3)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x899=((sj1)*(sj2));
IkReal x900=((cj3)*(r00));
IkReal x901=((r01)*(sj3));
IkReal x902=((cj1)*(sj2));
IkReal x903=((r00)*(sj3));
IkReal x904=((cj2)*(sj1));
IkReal x905=((cj1)*(cj2));
IkReal x906=((IkReal(1.00000000000000))*(cj3)*(r01));
if( IKabs(((gconst3)*(((((x903)*(x905)))+(((x901)*(x904)))+(((x901)*(x902)))+(((cj3)*(r01)*(x899)))+(((x900)*(x904)))+(((x900)*(x902)))+(((IkReal(-1.00000000000000))*(x899)*(x903)))+(((IkReal(-1.00000000000000))*(x905)*(x906))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x903)*(x904)))+(((IkReal(-1.00000000000000))*(x901)*(x905)))+(((IkReal(-1.00000000000000))*(x900)*(x905)))+(((IkReal(-1.00000000000000))*(x902)*(x906)))+(((x902)*(x903)))+(((x899)*(x901)))+(((x899)*(x900)))+(((IkReal(-1.00000000000000))*(x904)*(x906))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((((x903)*(x905)))+(((x901)*(x904)))+(((x901)*(x902)))+(((cj3)*(r01)*(x899)))+(((x900)*(x904)))+(((x900)*(x902)))+(((IkReal(-1.00000000000000))*(x899)*(x903)))+(((IkReal(-1.00000000000000))*(x905)*(x906)))))), ((gconst3)*(((((x903)*(x904)))+(((IkReal(-1.00000000000000))*(x901)*(x905)))+(((IkReal(-1.00000000000000))*(x900)*(x905)))+(((IkReal(-1.00000000000000))*(x902)*(x906)))+(((x902)*(x903)))+(((x899)*(x901)))+(((x899)*(x900)))+(((IkReal(-1.00000000000000))*(x904)*(x906)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x907=IKsin(j5);
IkReal x908=IKcos(j5);
IkReal x909=((cj1)*(r00));
IkReal x910=((cj2)*(r01));
IkReal x911=((IkReal(1.00000000000000))*(sj2));
IkReal x912=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj3)*(x908)))+(((cj2)*(x909)))+(((IkReal(-1.00000000000000))*(sj3)*(x907)))+(((IkReal(-1.00000000000000))*(x911)*(x912)))+(((sj1)*(x910))));
evalcond[1]=((((sj3)*(x908)))+(((cj3)*(x907)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x911)))+(((IkReal(-1.00000000000000))*(cj2)*(x912)))+(((IkReal(-1.00000000000000))*(x909)*(x911)))+(((cj1)*(x910))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x913=((cj2)*(px));
IkReal x914=((IkReal(1.00000000000000))*(sj1));
IkReal x915=((cj1)*(py));
IkReal x916=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(0.140720000000000))+(((IkReal(0.190892000000000))*(cj4)))+(((sj2)*(x915)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x914)*(x916)))+(((IkReal(-0.000787000000000000))*(sj4)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x913))));
evalcond[3]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x913)*(x914)))+(((cj2)*(x915)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x914)))+(((IkReal(-1.00000000000000))*(cj1)*(x916)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x917=((cj1)*(cj2));
IkReal x918=((IkReal(1.00000000000000))*(sj1));
IkReal x919=((py)*(sj2));
IkReal x920=((cj2)*(sj1));
IkReal x921=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x918)))+(((r01)*(x920)))+(((r00)*(x917))));
evalcond[3]=((IkReal(0.331612000000000))+(((px)*(x917)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x920)))+(((IkReal(-1.00000000000000))*(x918)*(x921)))+(((IkReal(0.00982000000000000))*(sj2)))+(((cj1)*(x919))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x918)*(x919)))+(((IkReal(-1.00000000000000))*(cj1)*(x921)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x918)))+(((IkReal(-0.521670000000000))*(sj2)))+(((py)*(x917))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x922=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x922)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x922))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x923=((cj1)*(cj2));
IkReal x924=((IkReal(1.00000000000000))*(sj1));
IkReal x925=((py)*(sj2));
IkReal x926=((cj2)*(sj1));
IkReal x927=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x924)))+(((r01)*(x926)))+(((r00)*(x923))));
evalcond[3]=((IkReal(-0.0501720000000000))+(((IkReal(-1.00000000000000))*(x924)*(x927)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x926)))+(((px)*(x923)))+(((cj1)*(x925)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x924)))+(((IkReal(-1.00000000000000))*(cj1)*(x927)))+(((IkReal(-1.00000000000000))*(x924)*(x925)))+(((py)*(x923)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x928=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x928)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x928))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x929=((IkReal(1.00000000000000))*(sj1));
IkReal x930=((cj2)*(px));
IkReal x931=((cj1)*(py));
IkReal x932=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.139933000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x929)*(x932)))+(((cj1)*(x930)))+(((sj2)*(x931)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x932)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x929)))+(((cj2)*(x931)))+(((IkReal(-1.00000000000000))*(x929)*(x930)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x933=((r01)*(sj2));
IkReal x934=((IkReal(1.00000000000000))*(cj1));
IkReal x935=((r00)*(sj2));
IkReal x936=((cj2)*(sj1));
if( IKabs(((((sj1)*(x935)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x934)))+(((IkReal(-1.00000000000000))*(r01)*(x936)))+(((IkReal(-1.00000000000000))*(x933)*(x934))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((sj1)*(x933)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x934)))+(((cj1)*(x935)))+(((r00)*(x936))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj1)*(x935)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x934)))+(((IkReal(-1.00000000000000))*(r01)*(x936)))+(((IkReal(-1.00000000000000))*(x933)*(x934)))))+IKsqr(((((sj1)*(x933)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x934)))+(((cj1)*(x935)))+(((r00)*(x936)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((sj1)*(x935)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x934)))+(((IkReal(-1.00000000000000))*(r01)*(x936)))+(((IkReal(-1.00000000000000))*(x933)*(x934)))), ((((sj1)*(x933)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x934)))+(((cj1)*(x935)))+(((r00)*(x936)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x937=((cj1)*(r00));
IkReal x938=((cj2)*(r01));
IkReal x939=((IkReal(1.00000000000000))*(sj2));
IkReal x940=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x939)*(x940)))+(((sj1)*(x938)))+(IKsin(j5))+(((cj2)*(x937))));
evalcond[1]=((IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(x940)))+(((cj1)*(x938)))+(((IkReal(-1.00000000000000))*(x937)*(x939)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x939))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x941=((IkReal(1.00000000000000))*(sj1));
IkReal x942=((cj2)*(px));
IkReal x943=((cj1)*(py));
IkReal x944=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.141507000000000))+(((sj2)*(x943)))+(((IkReal(-1.00000000000000))*(x941)*(x944)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x942)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.209759000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((cj2)*(x943)))+(((IkReal(-1.00000000000000))*(x941)*(x942)))+(((IkReal(-1.00000000000000))*(cj1)*(x944)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x941)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x945=((cj1)*(cj2));
IkReal x946=((r01)*(sj1));
IkReal x947=((cj1)*(sj2));
IkReal x948=((r00)*(sj1));
if( IKabs(((((cj2)*(x946)))+(((r01)*(x947)))+(((r00)*(x945)))+(((IkReal(-1.00000000000000))*(sj2)*(x948))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(x945)))+(((sj2)*(x946)))+(((cj2)*(x948)))+(((r00)*(x947))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(x946)))+(((r01)*(x947)))+(((r00)*(x945)))+(((IkReal(-1.00000000000000))*(sj2)*(x948)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x945)))+(((sj2)*(x946)))+(((cj2)*(x948)))+(((r00)*(x947)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(x946)))+(((r01)*(x947)))+(((r00)*(x945)))+(((IkReal(-1.00000000000000))*(sj2)*(x948)))), ((((IkReal(-1.00000000000000))*(r01)*(x945)))+(((sj2)*(x946)))+(((cj2)*(x948)))+(((r00)*(x947)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x949=((cj1)*(r00));
IkReal x950=((cj2)*(r01));
IkReal x951=((IkReal(1.00000000000000))*(sj2));
IkReal x952=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x949)))+(((sj1)*(x950)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x951)))+(((IkReal(-1.00000000000000))*(cj2)*(x952)))+(((cj1)*(x950)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(x949)*(x951))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x953=((r01)*(sj2));
IkReal x954=((IkReal(1.00000000000000))*(cj1));
IkReal x955=((r00)*(sj2));
IkReal x956=((cj2)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x954)))+(((IkReal(-1.00000000000000))*(x953)*(x954)))+(((sj1)*(x955)))+(((IkReal(-1.00000000000000))*(r01)*(x956))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(x955)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x954)))+(((r00)*(x956)))+(((sj1)*(x953))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x954)))+(((IkReal(-1.00000000000000))*(x953)*(x954)))+(((sj1)*(x955)))+(((IkReal(-1.00000000000000))*(r01)*(x956)))))))+IKsqr(((((cj1)*(x955)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x954)))+(((r00)*(x956)))+(((sj1)*(x953)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x954)))+(((IkReal(-1.00000000000000))*(x953)*(x954)))+(((sj1)*(x955)))+(((IkReal(-1.00000000000000))*(r01)*(x956)))))), ((((cj1)*(x955)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x954)))+(((r00)*(x956)))+(((sj1)*(x953)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x957=IKsin(j5);
IkReal x958=((cj1)*(r00));
IkReal x959=((cj2)*(r01));
IkReal x960=((IkReal(1.00000000000000))*(sj2));
IkReal x961=((r00)*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x957)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x960)*(x961)))+(((sj4)*(x957)))+(((cj2)*(x958)))+(((sj1)*(x959))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x961)))+(((cj1)*(x959)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(x958)*(x960)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x960))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x962=IKsin(j5);
IkReal x963=((cj1)*(r00));
IkReal x964=((cj2)*(r01));
IkReal x965=((IkReal(1.00000000000000))*(sj2));
IkReal x966=((r00)*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x962)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x965)*(x966)))+(((sj4)*(x962)))+(((sj1)*(x964)))+(((cj2)*(x963))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x966)))+(((IkReal(-1.00000000000000))*(x963)*(x965)))+(((cj1)*(x964)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x965))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x967=((cj2)*(px));
IkReal x968=((IkReal(1.00000000000000))*(sj1));
IkReal x969=((cj1)*(py));
IkReal x970=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(-0.125720000000000))+(((cj1)*(x967)))+(((IkReal(0.000787000000000000))*(sj4)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-0.190892000000000))*(cj4)))+(((sj2)*(x969)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x968)*(x970))));
evalcond[3]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x967)*(x968)))+(((IkReal(-1.00000000000000))*(cj1)*(x970)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x968)))+(((cj2)*(x969)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x971=((cj1)*(cj2));
IkReal x972=((IkReal(1.00000000000000))*(sj1));
IkReal x973=((py)*(sj2));
IkReal x974=((cj2)*(sj1));
IkReal x975=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x972)))+(((r01)*(x974)))+(((r00)*(x971))));
evalcond[3]=((IkReal(-0.316612000000000))+(((cj1)*(x973)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x974)))+(((IkReal(-1.00000000000000))*(x972)*(x975)))+(((px)*(x971)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x972)))+(((IkReal(-1.00000000000000))*(cj1)*(x975)))+(((py)*(x971)))+(((IkReal(-1.00000000000000))*(x972)*(x973)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x976=((IkReal(1.00000000000000))*(r00));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x976)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x976)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x976)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x976)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x976)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x976)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x977=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x977)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x977)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x978=((cj1)*(cj2));
IkReal x979=((IkReal(1.00000000000000))*(sj1));
IkReal x980=((py)*(sj2));
IkReal x981=((cj2)*(sj1));
IkReal x982=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(r00)*(sj2)*(x979)))+(((r01)*(x981)))+(((r00)*(x978))));
evalcond[3]=((IkReal(0.0651720000000000))+(((cj1)*(x980)))+(((IkReal(0.521670000000000))*(cj2)))+(((py)*(x981)))+(((IkReal(-1.00000000000000))*(x979)*(x982)))+(((px)*(x978)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(px)*(x979)))+(((IkReal(-1.00000000000000))*(cj1)*(x982)))+(((py)*(x978)))+(((IkReal(-1.00000000000000))*(x979)*(x980)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x983=((IkReal(1.00000000000000))*(r00));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x983)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x983)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x983)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x983)))+(((cj1)*(cj2)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x983)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x983)))+(((cj1)*(cj2)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x984=((IkReal(1.00000000000000))*(r00));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x984)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x984)))+(((cj1)*(cj2)*(r01))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x985=((IkReal(1.00000000000000))*(sj1));
IkReal x986=((cj2)*(px));
IkReal x987=((cj1)*(py));
IkReal x988=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.124933000000000))+(((cj1)*(x986)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x985)*(x988)))+(((sj2)*(x987)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x988)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x985)))+(((cj2)*(x987)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x985)*(x986))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x989=((cj1)*(r00));
IkReal x990=((cj2)*(r01));
IkReal x991=((IkReal(1.00000000000000))*(sj2));
IkReal x992=((r00)*(sj1));
if( IKabs(((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x991)*(x992)))+(((cj2)*(x989)))+(((sj1)*(x990))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(x992)))+(((cj1)*(x990)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x991)))+(((IkReal(-1.00000000000000))*(x989)*(x991))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x991)*(x992)))+(((cj2)*(x989)))+(((sj1)*(x990)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(x992)))+(((cj1)*(x990)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x991)))+(((IkReal(-1.00000000000000))*(x989)*(x991)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x991)*(x992)))+(((cj2)*(x989)))+(((sj1)*(x990)))), ((((IkReal(-1.00000000000000))*(cj2)*(x992)))+(((cj1)*(x990)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x991)))+(((IkReal(-1.00000000000000))*(x989)*(x991)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x993=((cj1)*(r00));
IkReal x994=((cj2)*(r01));
IkReal x995=((IkReal(1.00000000000000))*(sj2));
IkReal x996=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x995)*(x996)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj2)*(x993)))+(((sj1)*(x994))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x996)))+(((cj1)*(x994)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x995)))+(((IkReal(-1.00000000000000))*(x993)*(x995))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x997=((IkReal(1.00000000000000))*(sj1));
IkReal x998=((cj2)*(px));
IkReal x999=((cj1)*(py));
IkReal x1000=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.126507000000000))+(((cj1)*(x998)))+(((sj2)*(x999)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x1000)*(x997)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.312421000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x997)))+(((IkReal(-1.00000000000000))*(x997)*(x998)))+(((IkReal(-1.00000000000000))*(cj1)*(x1000)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x999))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1001=((r00)*(sj1));
IkReal x1002=((IkReal(1.00000000000000))*(cj2));
IkReal x1003=((r01)*(sj1));
IkReal x1004=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1002)))+(((sj2)*(x1001)))+(((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(r01)*(x1004))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(r00)*(x1004)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(sj2)*(x1003))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1002)))+(((sj2)*(x1001)))+(((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(r01)*(x1004)))))+IKsqr(((((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(r00)*(x1004)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(sj2)*(x1003)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1002)))+(((sj2)*(x1001)))+(((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(r01)*(x1004)))), ((((IkReal(-1.00000000000000))*(x1001)*(x1002)))+(((IkReal(-1.00000000000000))*(r00)*(x1004)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(sj2)*(x1003)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1005=((cj1)*(r00));
IkReal x1006=((cj2)*(r01));
IkReal x1007=((IkReal(1.00000000000000))*(sj2));
IkReal x1008=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x1005)))+(((sj1)*(x1006)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(x1007)*(x1008))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(cj2)*(x1008)))+(((IkReal(-1.00000000000000))*(x1005)*(x1007)))+(((cj1)*(x1006)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1007))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1009=((cj1)*(r00));
IkReal x1010=((cj2)*(r01));
IkReal x1011=((IkReal(1.00000000000000))*(sj2));
IkReal x1012=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x1009)))+(((IkReal(-1.00000000000000))*(x1011)*(x1012)))+(((sj1)*(x1010))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(x1009)*(x1011)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1011)))+(((cj1)*(x1010)))+(((IkReal(-1.00000000000000))*(cj2)*(x1012))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x1009)))+(((IkReal(-1.00000000000000))*(x1011)*(x1012)))+(((sj1)*(x1010)))))))+IKsqr(((((IkReal(-1.00000000000000))*(x1009)*(x1011)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1011)))+(((cj1)*(x1010)))+(((IkReal(-1.00000000000000))*(cj2)*(x1012)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)*(sj2)))+(((cj2)*(x1009)))+(((IkReal(-1.00000000000000))*(x1011)*(x1012)))+(((sj1)*(x1010)))))), ((((IkReal(-1.00000000000000))*(x1009)*(x1011)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1011)))+(((cj1)*(x1010)))+(((IkReal(-1.00000000000000))*(cj2)*(x1012)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1013=IKsin(j5);
IkReal x1014=((cj1)*(r00));
IkReal x1015=((cj2)*(r01));
IkReal x1016=((IkReal(1.00000000000000))*(sj2));
IkReal x1017=((r00)*(sj1));
IkReal x1018=((IkReal(1.00000000000000))*(x1013));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x1018)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x1014)))+(((sj1)*(x1015)))+(((IkReal(-1.00000000000000))*(x1016)*(x1017)))+(((IkReal(-1.00000000000000))*(sj4)*(x1018))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1014)*(x1016)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1016)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj1)*(x1015)))+(((IkReal(-1.00000000000000))*(cj2)*(x1017))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1019=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1019)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1019))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1019)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1019)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1019)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1019)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1020=IKsin(j5);
IkReal x1021=((cj1)*(r00));
IkReal x1022=((cj2)*(r01));
IkReal x1023=((IkReal(1.00000000000000))*(sj2));
IkReal x1024=((r00)*(sj1));
IkReal x1025=((IkReal(1.00000000000000))*(x1020));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x1025)))+(r02));
evalcond[1]=((((cj2)*(x1021)))+(((sj1)*(x1022)))+(((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1023)*(x1024)))+(((IkReal(-1.00000000000000))*(sj4)*(x1025))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1023)))+(((IkReal(-1.00000000000000))*(x1021)*(x1023)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj1)*(x1022)))+(((IkReal(-1.00000000000000))*(cj2)*(x1024))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1026=((cj2)*(px));
IkReal x1027=((IkReal(1.00000000000000))*(sj1));
IkReal x1028=((cj1)*(py));
IkReal x1029=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(0.0588310000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x1027)*(x1029)))+(((IkReal(0.00982000000000000))*(sj2)))+(((sj2)*(x1028)))+(((cj1)*(x1026))));
evalcond[3]=((IkReal(-0.394310000000000))+(((cj2)*(x1028)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj1)*(x1029)))+(((IkReal(-1.00000000000000))*(x1026)*(x1027)))+(((IkReal(0.000787000000000000))*(sj4)))+(((IkReal(-0.190892000000000))*(cj4)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1027))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1030=((cj2)*(px));
IkReal x1031=((IkReal(1.00000000000000))*(sj1));
IkReal x1032=((cj1)*(py));
IkReal x1033=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1031)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1031)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x1033))));
evalcond[3]=((IkReal(0.0588310000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x1032)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x1031)))+(((cj1)*(x1030)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.585202000000000))+(((cj2)*(x1032)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1030)*(x1031)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1031)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(x1033))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1034=((IkReal(1.00000000000000))*(cj2));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1034)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1034)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1034)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1034)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1034)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1034)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1035=((cj2)*(px));
IkReal x1036=((IkReal(1.00000000000000))*(sj1));
IkReal x1037=((cj1)*(py));
IkReal x1038=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1036)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1036)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x1038))));
evalcond[3]=((IkReal(0.0588310000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x1037)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x1036)))+(((cj1)*(x1035)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.203418000000000))+(((cj2)*(x1037)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1035)*(x1036)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1036)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(x1038))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1039=((IkReal(1.00000000000000))*(r01));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1039)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1039)))+(((r00)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1039)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1039)))+(((r00)*(sj1)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1039)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1039)))+(((r00)*(sj1)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(IKcos(j5))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1040=((IkReal(1.00000000000000))*(sj1));
IkReal x1041=((cj2)*(px));
IkReal x1042=((cj1)*(py));
IkReal x1043=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((sj2)*(x1042)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x1041)))+(((IkReal(-1.00000000000000))*(x1040)*(x1043)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.393523000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1040)))+(((IkReal(-1.00000000000000))*(cj1)*(x1043)))+(((cj2)*(x1042)))+(((IkReal(-1.00000000000000))*(x1040)*(x1041)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1044=((r00)*(sj1));
IkReal x1045=((IkReal(1.00000000000000))*(cj2));
IkReal x1046=((r01)*(sj1));
IkReal x1047=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x1047)))+(((IkReal(-1.00000000000000))*(x1044)*(x1045)))+(((IkReal(-1.00000000000000))*(sj2)*(x1046)))+(((cj1)*(cj2)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(x1047)))+(((IkReal(-1.00000000000000))*(x1045)*(x1046)))+(((sj2)*(x1044)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1045))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x1047)))+(((IkReal(-1.00000000000000))*(x1044)*(x1045)))+(((IkReal(-1.00000000000000))*(sj2)*(x1046)))+(((cj1)*(cj2)*(r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x1047)))+(((IkReal(-1.00000000000000))*(x1045)*(x1046)))+(((sj2)*(x1044)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1045)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x1047)))+(((IkReal(-1.00000000000000))*(x1044)*(x1045)))+(((IkReal(-1.00000000000000))*(sj2)*(x1046)))+(((cj1)*(cj2)*(r01)))), ((((IkReal(-1.00000000000000))*(r01)*(x1047)))+(((IkReal(-1.00000000000000))*(x1045)*(x1046)))+(((sj2)*(x1044)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1045)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1048=((cj1)*(r00));
IkReal x1049=((cj2)*(r01));
IkReal x1050=((IkReal(1.00000000000000))*(sj2));
IkReal x1051=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x1048)))+(IKcos(j5))+(((sj1)*(x1049)))+(((IkReal(-1.00000000000000))*(x1050)*(x1051))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x1051)))+(((cj1)*(x1049)))+(((IkReal(-1.00000000000000))*(x1048)*(x1050)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1050))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1052=((IkReal(1.00000000000000))*(sj1));
IkReal x1053=((cj2)*(px));
IkReal x1054=((cj1)*(py));
IkReal x1055=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(0.0588310000000000))+(((IkReal(-1.00000000000000))*(x1052)*(x1055)))+(((sj2)*(x1054)))+(((cj1)*(x1053)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.395097000000000))+(((IkReal(-1.00000000000000))*(x1052)*(x1053)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1052)))+(((IkReal(-1.00000000000000))*(cj1)*(x1055)))+(((cj2)*(x1054)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1056=((r01)*(sj2));
IkReal x1057=((IkReal(1.00000000000000))*(cj1));
IkReal x1058=((r00)*(sj2));
IkReal x1059=((cj2)*(sj1));
if( IKabs(((((cj1)*(x1058)))+(((sj1)*(x1056)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1057)))+(((r00)*(x1059))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(x1059)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1057)))+(((sj1)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1057))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(x1058)))+(((sj1)*(x1056)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1057)))+(((r00)*(x1059)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x1059)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1057)))+(((sj1)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1057)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(x1058)))+(((sj1)*(x1056)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1057)))+(((r00)*(x1059)))), ((((IkReal(-1.00000000000000))*(r01)*(x1059)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1057)))+(((sj1)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1057)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1060=((cj1)*(r00));
IkReal x1061=((cj2)*(r01));
IkReal x1062=((IkReal(1.00000000000000))*(sj2));
IkReal x1063=((r00)*(sj1));
evalcond[0]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x1060)))+(((IkReal(-1.00000000000000))*(x1062)*(x1063)))+(IKcos(j5))+(((sj1)*(x1061))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1060)*(x1062)))+(((IkReal(-1.00000000000000))*(cj2)*(x1063)))+(IKsin(j5))+(((cj1)*(x1061)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1062))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1064=((r00)*(sj1));
IkReal x1065=((IkReal(1.00000000000000))*(cj2));
IkReal x1066=((r01)*(sj1));
IkReal x1067=((IkReal(1.00000000000000))*(cj1)*(sj2));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x1067)))+(((IkReal(-1.00000000000000))*(sj2)*(x1066)))+(((IkReal(-1.00000000000000))*(x1064)*(x1065)))+(((cj1)*(cj2)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(x1067)))+(((sj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1066))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x1067)))+(((IkReal(-1.00000000000000))*(sj2)*(x1066)))+(((IkReal(-1.00000000000000))*(x1064)*(x1065)))+(((cj1)*(cj2)*(r01)))))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x1067)))+(((sj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1066)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x1067)))+(((IkReal(-1.00000000000000))*(sj2)*(x1066)))+(((IkReal(-1.00000000000000))*(x1064)*(x1065)))+(((cj1)*(cj2)*(r01)))))), ((((IkReal(-1.00000000000000))*(r01)*(x1067)))+(((sj2)*(x1064)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1065)))+(((IkReal(-1.00000000000000))*(x1065)*(x1066)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1068=IKsin(j5);
IkReal x1069=((cj1)*(r00));
IkReal x1070=((cj2)*(r01));
IkReal x1071=((IkReal(1.00000000000000))*(sj2));
IkReal x1072=((r00)*(sj1));
IkReal x1073=((IkReal(1.00000000000000))*(x1068));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x1073)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1071)*(x1072)))+(((cj2)*(x1069)))+(IKcos(j5))+(((sj1)*(x1070))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x1072)))+(((cj1)*(x1070)))+(((IkReal(-1.00000000000000))*(sj4)*(x1073)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1071)))+(((IkReal(-1.00000000000000))*(x1069)*(x1071))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1074=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1074)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1074)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1074)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1074)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1074)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1074)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1075=IKsin(j5);
IkReal x1076=((cj1)*(r00));
IkReal x1077=((cj2)*(r01));
IkReal x1078=((IkReal(1.00000000000000))*(sj2));
IkReal x1079=((r00)*(sj1));
IkReal x1080=((IkReal(1.00000000000000))*(x1075));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x1080)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((cj2)*(x1076)))+(IKcos(j5))+(((sj1)*(x1077))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x1079)))+(((IkReal(-1.00000000000000))*(x1076)*(x1078)))+(((IkReal(-1.00000000000000))*(sj4)*(x1080)))+(((cj1)*(x1077)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1078))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1081=((cj2)*(px));
IkReal x1082=((IkReal(1.00000000000000))*(sj1));
IkReal x1083=((cj1)*(py));
IkReal x1084=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(0.190892000000000))*(sj4)))+(((IkReal(0.000787000000000000))*(cj4)))+(pz));
evalcond[2]=((IkReal(-0.0438310000000000))+(((sj2)*(x1083)))+(((cj1)*(x1081)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x1082)*(x1084)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[3]=((IkReal(-0.127870000000000))+(((IkReal(0.190892000000000))*(cj4)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1081)*(x1082)))+(((IkReal(-1.00000000000000))*(cj1)*(x1084)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1082)))+(((cj2)*(x1083)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-0.000787000000000000))*(sj4))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x1085=((cj2)*(px));
IkReal x1086=((IkReal(1.00000000000000))*(sj1));
IkReal x1087=((cj1)*(py));
IkReal x1088=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1086)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1086)))+(((IkReal(-1.00000000000000))*(r00)*(x1088)))+(((cj1)*(cj2)*(r01))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((sj2)*(x1087)))+(((cj1)*(x1085)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x1086)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(0.0630220000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1085)*(x1086)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1086)))+(((cj2)*(x1087)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(x1088))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1089=((cj2)*(px));
IkReal x1090=((IkReal(1.00000000000000))*(sj1));
IkReal x1091=((cj1)*(py));
IkReal x1092=((IkReal(1.00000000000000))*(cj1)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1090)))+(((cj1)*(cj2)*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1090)))+(((IkReal(-1.00000000000000))*(r00)*(x1092))));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x1089)))+(((IkReal(-1.00000000000000))*(px)*(sj2)*(x1090)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x1091)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.318762000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x1089)*(x1090)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1090)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x1091)))+(((IkReal(-1.00000000000000))*(px)*(x1092))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1093=((IkReal(1.00000000000000))*(sj1));
IkReal x1094=((cj2)*(px));
IkReal x1095=((cj1)*(py));
IkReal x1096=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((cj1)*(x1094)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x1093)*(x1096)))+(((sj2)*(x1095)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.128657000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1093)))+(((IkReal(-1.00000000000000))*(x1093)*(x1094)))+(((IkReal(-0.521670000000000))*(sj2)))+(((cj2)*(x1095)))+(((IkReal(-1.00000000000000))*(cj1)*(x1096))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1097=((cj1)*(cj2));
IkReal x1098=((r01)*(sj1));
IkReal x1099=((cj1)*(sj2));
IkReal x1100=((r00)*(sj1));
if( IKabs(((((r00)*(x1099)))+(((sj2)*(x1098)))+(((IkReal(-1.00000000000000))*(r01)*(x1097)))+(((cj2)*(x1100))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(x1099)))+(((r00)*(x1097)))+(((IkReal(-1.00000000000000))*(sj2)*(x1100)))+(((cj2)*(x1098))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x1099)))+(((sj2)*(x1098)))+(((IkReal(-1.00000000000000))*(r01)*(x1097)))+(((cj2)*(x1100)))))+IKsqr(((((r01)*(x1099)))+(((r00)*(x1097)))+(((IkReal(-1.00000000000000))*(sj2)*(x1100)))+(((cj2)*(x1098)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(x1099)))+(((sj2)*(x1098)))+(((IkReal(-1.00000000000000))*(r01)*(x1097)))+(((cj2)*(x1100)))), ((((r01)*(x1099)))+(((r00)*(x1097)))+(((IkReal(-1.00000000000000))*(sj2)*(x1100)))+(((cj2)*(x1098)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1101=((cj1)*(cj2));
IkReal x1102=((cj2)*(sj1));
IkReal x1103=((IkReal(1.00000000000000))*(r00));
IkReal x1104=((cj1)*(sj2));
IkReal x1105=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1103)*(x1105)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r01)*(x1102)))+(((r01)*(x1104)))+(((r00)*(x1101))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1103)*(x1104)))+(((r01)*(x1101)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(r01)*(x1105)))+(((IkReal(-1.00000000000000))*(x1102)*(x1103))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x1106=((IkReal(1.00000000000000))*(sj1));
IkReal x1107=((cj2)*(px));
IkReal x1108=((cj1)*(py));
IkReal x1109=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=r02;
evalcond[2]=((IkReal(-0.190892000000000))+(pz));
evalcond[3]=((IkReal(-0.0438310000000000))+(((sj2)*(x1108)))+(((cj1)*(x1107)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((IkReal(-1.00000000000000))*(x1106)*(x1109)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[4]=((IkReal(-0.127083000000000))+(((IkReal(-1.00000000000000))*(cj1)*(x1109)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1106)))+(((IkReal(-1.00000000000000))*(x1106)*(x1107)))+(((cj2)*(x1108)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1110=((cj1)*(r00));
IkReal x1111=((cj2)*(r01));
IkReal x1112=((IkReal(1.00000000000000))*(sj2));
IkReal x1113=((r00)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj2)*(x1113)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1112)))+(((cj1)*(x1111)))+(((IkReal(-1.00000000000000))*(x1110)*(x1112))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)))+(((sj1)*(x1111)))+(((cj2)*(x1110))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj2)*(x1113)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1112)))+(((cj1)*(x1111)))+(((IkReal(-1.00000000000000))*(x1110)*(x1112)))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)))+(((sj1)*(x1111)))+(((cj2)*(x1110)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj2)*(x1113)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1112)))+(((cj1)*(x1111)))+(((IkReal(-1.00000000000000))*(x1110)*(x1112)))), ((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)))+(((sj1)*(x1111)))+(((cj2)*(x1110)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1114=((cj1)*(cj2));
IkReal x1115=((cj2)*(sj1));
IkReal x1116=((IkReal(1.00000000000000))*(r00));
IkReal x1117=((cj1)*(sj2));
IkReal x1118=((sj1)*(sj2));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1116)*(x1118)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r01)*(x1115)))+(((r01)*(x1117)))+(((r00)*(x1114))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1116)*(x1117)))+(((r01)*(x1114)))+(((IkReal(-1.00000000000000))*(r01)*(x1118)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x1115)*(x1116))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1119=((cj1)*(cj2));
IkReal x1120=((r01)*(sj1));
IkReal x1121=((cj1)*(sj2));
IkReal x1122=((r00)*(sj1));
if( IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(x1121)))+(((cj2)*(x1122)))+(((sj2)*(x1120)))+(((IkReal(-1.00000000000000))*(r01)*(x1119))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(x1120)))+(((r01)*(x1121)))+(((r00)*(x1119)))+(((IkReal(-1.00000000000000))*(sj2)*(x1122))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(x1121)))+(((cj2)*(x1122)))+(((sj2)*(x1120)))+(((IkReal(-1.00000000000000))*(r01)*(x1119)))))))+IKsqr(((((cj2)*(x1120)))+(((r01)*(x1121)))+(((r00)*(x1119)))+(((IkReal(-1.00000000000000))*(sj2)*(x1122)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(x1121)))+(((cj2)*(x1122)))+(((sj2)*(x1120)))+(((IkReal(-1.00000000000000))*(r01)*(x1119)))))), ((((cj2)*(x1120)))+(((r01)*(x1121)))+(((r00)*(x1119)))+(((IkReal(-1.00000000000000))*(sj2)*(x1122)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1123=IKsin(j5);
IkReal x1124=((cj1)*(cj2));
IkReal x1125=((cj2)*(sj1));
IkReal x1126=((IkReal(1.00000000000000))*(r00));
IkReal x1127=((cj1)*(sj2));
IkReal x1128=((sj1)*(sj2));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x1123))));
evalcond[1]=((((r00)*(x1124)))+(((r01)*(x1125)))+(((r01)*(x1127)))+(((IkReal(-1.00000000000000))*(x1126)*(x1128)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[2]=((((r01)*(x1124)))+(((sj4)*(x1123)))+(((IkReal(-1.00000000000000))*(x1126)*(x1127)))+(((IkReal(-1.00000000000000))*(r01)*(x1128)))+(((IkReal(-1.00000000000000))*(x1125)*(x1126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))))+IKsqr(((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))), ((((cj1)*(r01)*(sj2)))+(((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1129=IKsin(j5);
IkReal x1130=((cj1)*(cj2));
IkReal x1131=((cj2)*(sj1));
IkReal x1132=((IkReal(1.00000000000000))*(r00));
IkReal x1133=((cj1)*(sj2));
IkReal x1134=((sj1)*(sj2));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x1129))));
evalcond[1]=((((r01)*(x1131)))+(((r01)*(x1133)))+(((r00)*(x1130)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(x1132)*(x1134))));
evalcond[2]=((((r01)*(x1130)))+(((IkReal(-1.00000000000000))*(x1131)*(x1132)))+(((sj4)*(x1129)))+(((IkReal(-1.00000000000000))*(r01)*(x1134)))+(((IkReal(-1.00000000000000))*(x1132)*(x1133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1135=((IkReal(1.00000000000000))*(sj1));
IkReal x1136=((cj2)*(px));
IkReal x1137=((cj1)*(py));
IkReal x1138=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.000787000000000000))+(pz));
evalcond[2]=((IkReal(0.00750000000000000))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((sj2)*(x1137)))+(((IkReal(-1.00000000000000))*(x1135)*(x1138)))+(((cj1)*(x1136)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.324112000000000))*(sj3)))+(((IkReal(0.00982000000000000))*(sj2))));
evalcond[3]=((IkReal(-0.261090000000000))+(((cj2)*(x1137)))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1135)))+(((IkReal(-1.00000000000000))*(cj1)*(x1138)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(x1135)*(x1136)))+(((IkReal(-0.324112000000000))*(cj3)))+(((IkReal(-0.521670000000000))*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1139=((IkReal(1.00000000000000))*(cj2));
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1139)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1139)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1139)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1139)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1139)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x1139)))+(((r00)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1140=IKcos(j5);
IkReal x1141=((cj1)*(r00));
IkReal x1142=((cj2)*(r01));
IkReal x1143=((IkReal(1.00000000000000))*(sj2));
IkReal x1144=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1143)*(x1144)))+(((cj2)*(x1141)))+(((cj3)*(x1140)))+(((sj1)*(x1142))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1141)*(x1143)))+(((IkReal(-1.00000000000000))*(cj2)*(x1144)))+(((sj3)*(x1140)))+(((cj1)*(x1142)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1143))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(r02)+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(r02, ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1145=IKcos(j5);
IkReal x1146=((cj1)*(r00));
IkReal x1147=((cj2)*(r01));
IkReal x1148=((IkReal(1.00000000000000))*(sj2));
IkReal x1149=((r00)*(sj1));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((cj2)*(x1146)))+(((cj3)*(x1145)))+(((sj1)*(x1147)))+(((IkReal(-1.00000000000000))*(x1148)*(x1149))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x1149)))+(((IkReal(-1.00000000000000))*(x1146)*(x1148)))+(((sj3)*(x1145)))+(((cj1)*(x1147)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1148))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1150=((IkReal(1.00000000000000))*(sj1));
IkReal x1151=((cj2)*(px));
IkReal x1152=((cj1)*(py));
IkReal x1153=((px)*(sj2));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.000787000000000000))+(pz));
evalcond[2]=((IkReal(0.00750000000000000))+(((sj2)*(x1152)))+(((IkReal(0.521670000000000))*(cj2)))+(((cj2)*(py)*(sj1)))+(((cj1)*(x1151)))+(((IkReal(-0.0576720000000000))*(sj3)))+(((IkReal(0.0513310000000000))*(cj3)))+(((IkReal(0.00982000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1150)*(x1153))));
evalcond[3]=((IkReal(-0.261090000000000))+(((IkReal(0.00982000000000000))*(cj2)))+(((IkReal(0.0576720000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x1153)))+(((cj2)*(x1152)))+(((IkReal(-1.00000000000000))*(py)*(sj2)*(x1150)))+(((IkReal(0.0513310000000000))*(sj3)))+(((IkReal(-0.521670000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x1150)*(x1151))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1154=((IkReal(1.00000000000000))*(r01));
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1154)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1154)))+(((r00)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1154)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1154)))+(((r00)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(sj1)*(x1154)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj1)*(sj2)*(x1154)))+(((r00)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1155=IKcos(j5);
IkReal x1156=((cj1)*(r00));
IkReal x1157=((cj2)*(sj1));
IkReal x1158=((IkReal(1.00000000000000))*(sj2));
IkReal x1159=((cj1)*(r01));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x1158)))+(((cj2)*(x1156)))+(((cj3)*(x1155)))+(((sj2)*(x1159)))+(((r01)*(x1157))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x1157)))+(((cj2)*(x1159)))+(((sj3)*(x1155)))+(((IkReal(-1.00000000000000))*(x1156)*(x1158)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((IkReal(-1.00000000000000))*(r02))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.00000000000000))*(r02)))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(-1.00000000000000))*(r02)), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj2)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r01)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1160=IKcos(j5);
IkReal x1161=((cj1)*(r00));
IkReal x1162=((cj2)*(sj1));
IkReal x1163=((IkReal(1.00000000000000))*(sj2));
IkReal x1164=((cj1)*(r01));
evalcond[0]=((IKsin(j5))+(r02));
evalcond[1]=((((sj2)*(x1164)))+(((r01)*(x1162)))+(((cj3)*(x1160)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)*(x1163)))+(((cj2)*(x1161))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1163)))+(((IkReal(-1.00000000000000))*(r00)*(x1162)))+(((cj2)*(x1164)))+(((IkReal(-1.00000000000000))*(x1161)*(x1163)))+(((sj3)*(x1160))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1165=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x1166=((cj4)*(sj1));
IkReal x1167=((IkReal(1.00000000000000))*(cj1)*(cj4));
if( IKabs(((r02)*(x1165))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1165)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1167)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1166)))+(((r00)*(sj2)*(x1166)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1167))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(x1165)))+IKsqr(((x1165)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1167)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1166)))+(((r00)*(sj2)*(x1166)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1167)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(x1165)), ((x1165)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(r00)*(x1167)))+(((IkReal(-1.00000000000000))*(r02)*(sj3)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x1166)))+(((r00)*(sj2)*(x1166)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x1167)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1168=IKsin(j5);
IkReal x1169=IKcos(j5);
IkReal x1170=((cj1)*(r00));
IkReal x1171=((cj2)*(r01));
IkReal x1172=((IkReal(1.00000000000000))*(sj2));
IkReal x1173=((r00)*(sj1));
IkReal x1174=((IkReal(1.00000000000000))*(x1168));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x1174))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj1)*(x1171)))+(((IkReal(-1.00000000000000))*(x1172)*(x1173)))+(((sj3)*(sj4)*(x1168)))+(((cj3)*(x1169)))+(((cj2)*(x1170))));
evalcond[2]=((((cj1)*(x1171)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1172)))+(((IkReal(-1.00000000000000))*(x1170)*(x1172)))+(((IkReal(-1.00000000000000))*(cj2)*(x1173)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x1174)))+(((sj3)*(x1169))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1175=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x1176=((cj4)*(r00));
IkReal x1177=((cj4)*(r01));
if( IKabs(((r02)*(x1175))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1175)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj1)*(sj2)*(x1176)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x1177)))+(((cj3)*(r02)*(sj4)))+(((sj1)*(sj2)*(x1177)))+(((cj2)*(sj1)*(x1176))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((r02)*(x1175)))+IKsqr(((x1175)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj1)*(sj2)*(x1176)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x1177)))+(((cj3)*(r02)*(sj4)))+(((sj1)*(sj2)*(x1177)))+(((cj2)*(sj1)*(x1176)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((r02)*(x1175)), ((x1175)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((cj1)*(sj2)*(x1176)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x1177)))+(((cj3)*(r02)*(sj4)))+(((sj1)*(sj2)*(x1177)))+(((cj2)*(sj1)*(x1176)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1178=IKsin(j5);
IkReal x1179=IKcos(j5);
IkReal x1180=((cj1)*(r00));
IkReal x1181=((cj2)*(r01));
IkReal x1182=((IkReal(1.00000000000000))*(sj2));
IkReal x1183=((r00)*(sj1));
IkReal x1184=((IkReal(1.00000000000000))*(x1178));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj4)*(x1184)))+(r02));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((sj3)*(sj4)*(x1178)))+(((sj1)*(x1181)))+(((IkReal(-1.00000000000000))*(x1182)*(x1183)))+(((cj3)*(x1179)))+(((cj2)*(x1180))));
evalcond[2]=((((sj3)*(x1179)))+(((IkReal(-1.00000000000000))*(cj2)*(x1183)))+(((IkReal(-1.00000000000000))*(x1180)*(x1182)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x1184)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1182)))+(((cj1)*(x1181))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1185=(cj3)*(cj3);
IkReal x1186=(sj3)*(sj3);
IkReal x1187=((IkReal(1.00000000000000))*(r00));
IkReal x1188=((cj2)*(cj3));
IkReal x1189=((cj1)*(r01));
IkReal x1190=((IkReal(1.00000000000000))*(r01));
IkReal x1191=((sj1)*(sj3));
IkReal x1192=((cj3)*(sj2));
IkReal x1193=((cj2)*(sj3));
IkReal x1194=((cj1)*(sj2)*(sj3));
if( IKabs(((((IKabs(((((sj4)*(x1186)))+(((sj4)*(x1185))))) != 0)?((IkReal)1/(((((sj4)*(x1186)))+(((sj4)*(x1185)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1190)*(x1191)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1192)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1193)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x1189)))+(((x1188)*(x1189)))+(((IkReal(-1.00000000000000))*(sj1)*(x1190)*(x1192)))+(((r00)*(sj2)*(x1191)))+(((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1188))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1192)))+(((r01)*(sj1)*(x1188)))+(((x1189)*(x1193)))+(((x1189)*(x1192)))+(((IkReal(-1.00000000000000))*(cj2)*(x1187)*(x1191)))+(((IkReal(-1.00000000000000))*(x1187)*(x1194)))+(((cj1)*(r00)*(x1188)))+(((IkReal(-1.00000000000000))*(sj2)*(x1190)*(x1191))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((sj4)*(x1186)))+(((sj4)*(x1185))))) != 0)?((IkReal)1/(((((sj4)*(x1186)))+(((sj4)*(x1185)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1190)*(x1191)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1192)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1193)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x1189)))+(((x1188)*(x1189)))+(((IkReal(-1.00000000000000))*(sj1)*(x1190)*(x1192)))+(((r00)*(sj2)*(x1191)))+(((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1188)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1192)))+(((r01)*(sj1)*(x1188)))+(((x1189)*(x1193)))+(((x1189)*(x1192)))+(((IkReal(-1.00000000000000))*(cj2)*(x1187)*(x1191)))+(((IkReal(-1.00000000000000))*(x1187)*(x1194)))+(((cj1)*(r00)*(x1188)))+(((IkReal(-1.00000000000000))*(sj2)*(x1190)*(x1191)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((sj4)*(x1186)))+(((sj4)*(x1185))))) != 0)?((IkReal)1/(((((sj4)*(x1186)))+(((sj4)*(x1185)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x1190)*(x1191)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1192)))+(((IkReal(-1.00000000000000))*(cj1)*(x1187)*(x1193)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x1189)))+(((x1188)*(x1189)))+(((IkReal(-1.00000000000000))*(sj1)*(x1190)*(x1192)))+(((r00)*(sj2)*(x1191)))+(((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1188)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x1185)))+(((IkReal(-1.00000000000000))*(x1186)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x1187)*(x1192)))+(((r01)*(sj1)*(x1188)))+(((x1189)*(x1193)))+(((x1189)*(x1192)))+(((IkReal(-1.00000000000000))*(cj2)*(x1187)*(x1191)))+(((IkReal(-1.00000000000000))*(x1187)*(x1194)))+(((cj1)*(r00)*(x1188)))+(((IkReal(-1.00000000000000))*(sj2)*(x1190)*(x1191)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1195=IKsin(j5);
IkReal x1196=IKcos(j5);
IkReal x1197=((cj1)*(r00));
IkReal x1198=((cj2)*(r01));
IkReal x1199=((IkReal(1.00000000000000))*(sj2));
IkReal x1200=((r00)*(sj1));
IkReal x1201=((IkReal(1.00000000000000))*(x1195));
evalcond[0]=((r02)+(((IkReal(-1.00000000000000))*(cj4)*(x1201))));
evalcond[1]=((((cj1)*(r01)*(sj2)))+(((IkReal(-1.00000000000000))*(x1199)*(x1200)))+(((sj1)*(x1198)))+(((cj2)*(x1197)))+(((sj3)*(sj4)*(x1195)))+(((cj3)*(x1196))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj2)*(x1200)))+(((IkReal(-1.00000000000000))*(x1197)*(x1199)))+(((sj3)*(x1196)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x1199)))+(((cj1)*(x1198)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x1201))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - grips (42cd1e57ce525d117bf2884d2003e33b)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
